package net.zdsoft.office.customer.service.impl;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang.StringUtils;import org.apache.tools.ant.taskdefs.Length.When;import net.zdsoft.eis.base.auditflow.manager.FlowInvoke;import net.zdsoft.eis.base.auditflow.manager.entity.FlowApply;import net.zdsoft.eis.base.auditflow.manager.service.impl.AbstractApplyBusinessServiceImpl;import net.zdsoft.eis.base.common.entity.Dept;import net.zdsoft.eis.base.common.entity.Teacher;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.DeptService;import net.zdsoft.eis.base.common.service.TeacherService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.keel.util.Pagination;import net.zdsoft.keelcnet.config.ContainerManager;import net.zdsoft.office.customer.constant.OfficeCustomerConstants;import net.zdsoft.office.customer.dao.OfficeCustomerApplyDao;import net.zdsoft.office.customer.entity.OfficeCustomerApply;import net.zdsoft.office.customer.entity.OfficeCustomerInfo;import net.zdsoft.office.customer.service.OfficeCustomerApplyService;import net.zdsoft.office.customer.service.OfficeCustomerBusinessApplyAuditService;import net.zdsoft.office.customer.service.OfficeCustomerDeptLeaderApplyService;import net.zdsoft.office.customer.service.OfficeCustomerFollowRecordService;import net.zdsoft.office.customer.service.OfficeCustomerInfoService;/** * office_customer_apply  * @author  *  *//** * office_customer_apply  * @author  *  */public class OfficeCustomerDeptLeaderApplyServiceImpl extends AbstractApplyBusinessServiceImpl<OfficeCustomerApply> implements OfficeCustomerDeptLeaderApplyService{		private OfficeCustomerBusinessApplyAuditService officeCustomerBusinessApplyAuditService;	private TeacherService teacherService;	private DeptService deptService;	private OfficeCustomerApplyDao officeCustomerApplyDao;	private OfficeCustomerInfoService officeCustomerInfoService;	private UserService userService;	private OfficeCustomerFollowRecordService officeCustomerFollowRecordService;	public void setDeptService(DeptService deptService) {		this.deptService = deptService;	}		public void setTeacherService(TeacherService teacherService) {		this.teacherService = teacherService;	}		public void setOfficeCustomerBusinessApplyAuditService(			OfficeCustomerBusinessApplyAuditService officeCustomerBusinessApplyAuditService) {		this.officeCustomerBusinessApplyAuditService = officeCustomerBusinessApplyAuditService;	}		public void setOfficeCustomerApplyDao(OfficeCustomerApplyDao officeCustomerApplyDao){		this.officeCustomerApplyDao = officeCustomerApplyDao;	}	public void setUserService(UserService userService) {		this.userService = userService;	}		public void setOfficeCustomerInfoService(			OfficeCustomerInfoService officeCustomerInfoService) {		this.officeCustomerInfoService = officeCustomerInfoService;	}	public Integer update(OfficeCustomerApply officeCustomerApply){		//3-1		if(officeCustomerApply.getState()==OfficeCustomerConstants.LEVEL_APPLY_FLOW_FINALLY_UNPASS){			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_PASS);		//3-1		}else if(officeCustomerApply.getState()==OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_UNPASS){			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOWING);		}else{//0-1			//如果是事业部负责人。未提交到提交后的状态是终审中			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_PASS);		}		schFlowApplyService.saveSubmitFlowApply(officeCustomerApply.getApplyId());		return officeCustomerApplyDao.update(officeCustomerApply);	}	@Override	public OfficeCustomerApply putOffApply(OfficeCustomerApply officeCustomerApply){		String everApplyId=officeCustomerApply.getId();		String applyUserId=officeCustomerApply.getApplyUserId();		String applyUserName=officeCustomerApply.getApplyUserName();		//获取原本的信息		OfficeCustomerApply everApply=officeCustomerApplyDao.getOfficeCustomerApplyById(everApplyId);		//将原本的数据is_delete改成1		officeCustomerApplyDao.updateIsDelete(true,everApplyId);		everApply.setApplyType(OfficeCustomerConstants.APPLY_PUT_OFF);		//everApply.setDeadline(officeCustomerApply.getPutOffTime());		everApply.setDelayInfo(officeCustomerApply.getDelayInfo());		everApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_PASS);		everApply.setCreateTime(new Date());		everApply.setId(null);		officeCustomerApply=officeCustomerApplyDao.save(everApply);				FlowApply flowApply=new FlowApply(				officeCustomerBusinessApplyAuditService.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE_2));		flowApply.setBusinessId(officeCustomerApply.getId());		flowApply.setBusinessType(OfficeCustomerConstants.BUSINESS_TYPE_2);		flowApply.setOperateType(FlowApply.OPERATE_TYPE_NO);		flowApply.setApplyUserId(applyUserId);		flowApply.setApplyUsername(applyUserName);		flowApply.setApplyUnitId(officeCustomerApply.getUnitId());		flowApply.setApplyDate(new Date());		flowApply.setStatus(FlowApply.STATUS_IN_AUDIT);		schFlowApplyService.addFlowApply(flowApply);		//修改跟进记录对呀的apply_id		officeCustomerFollowRecordService.updateApplyId(officeCustomerApply.getId(),everApplyId);		return officeCustomerApply;	}	@Override	public OfficeCustomerApply save(OfficeCustomerApply officeCustomerApply){		OfficeCustomerInfo info=officeCustomerApply.getOfficeCustomerInfo();		if(StringUtils.isNotBlank(info.getId())){			//若有客户信息id 则是资源库申请。			info.setState(OfficeCustomerConstants.INFO_APPLY);			info.setLibraryApply(true);			officeCustomerInfoService.update(info);		}else{			//新增申请			info.setState(OfficeCustomerConstants.INFO_APPLY);			info=officeCustomerInfoService.save(info);		}		//新增申请时的保存为0  提交为1		if(info.getAuditState()==FlowApply.STATUS_IN_AUDIT){			//若是事业部负责人直接提交，则状态是终审中			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_PASS);		}		officeCustomerApply.setCustomerId(info.getId());		officeCustomerApply.setCreateTime(new Date());		officeCustomerApply=officeCustomerApplyDao.save(officeCustomerApply);		FlowApply flowApply=new FlowApply(				officeCustomerBusinessApplyAuditService.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE_2));		flowApply.setBusinessId(officeCustomerApply.getId());		flowApply.setBusinessType(OfficeCustomerConstants.BUSINESS_TYPE_2);		flowApply.setOperateType(FlowApply.OPERATE_TYPE_NO);		flowApply.setApplyUserId(officeCustomerApply.getApplyUserId());		flowApply.setApplyUsername(officeCustomerApply.getApplyUserName());		flowApply.setApplyUnitId(officeCustomerApply.getUnitId());		flowApply.setApplyDate(new Date());		//保存时0  提交1（页面传入）		flowApply.setStatus(info.getAuditState());		schFlowApplyService.addFlowApply(flowApply);		return officeCustomerApply;	}		@Override	public String getArrangeId(String userId, String method, String type,String businessId) {		String[] params = new String[] { userId, type };		try {			return FlowInvoke.getArrangeId(new OfficeCustomerDeptLeaderApplyServiceImpl(),					method, params);		} catch (Exception e) {			e.printStackTrace();			return null;		}	}		//获取所属顶级部门的deptid	public String getDeptId(String userId,String type){		if (null == userService) {			userService = (UserService) ContainerManager.getComponent("userService");		}		if (null == teacherService) {			teacherService = (TeacherService) ContainerManager.getComponent("teacherService");		}		User user = userService.getUser(userId);		String deptId = "";		if(user != null){			Teacher t = teacherService.getTeacher(user.getTeacherid());			if(t != null)				deptId = t.getDeptid();		}		//根据deptId找到对应的顶级部门id		if(StringUtils.isNotBlank(deptId)){			Dept dept = deptService.getDept(deptId);			while (dept!=null && dept.getParentid()!=Dept.TOP_GROUP_GUID) {				dept = deptService.getDept(dept.getParentid());			}			if(dept != null){				deptId = dept.getId();			}		}		return deptId;	}		public String getSchoolId(String userId, String type) {		if (null == userService) {			userService = (UserService) ContainerManager.getComponent("userService");		}		return userService.getUser(userId).getUnitid();	}		public OfficeCustomerApply getEntity() {		OfficeCustomerApply ent = new OfficeCustomerApply();		ent.setFlowTypeValue(OfficeCustomerConstants.BUSINESS_TYPE_2);		return ent;	}		//最终审核通过之后	public void saveDisposeBusiness(FlowApply apply) {//		OfficeAssetApply ent = officeAssetApplyDao.getOfficeAssetApplyById(apply.getBusinessId());//		ent.setIsPassApply(true);//		ent.setPurchaseState(String.valueOf(FlowAudit.STATUS_PREPARING));//		ent.setCreationTime(new Date());//		officeAssetApplyDao.update(ent);	}	public void setOfficeCustomerFollowRecordService(			OfficeCustomerFollowRecordService officeCustomerFollowRecordService) {		this.officeCustomerFollowRecordService = officeCustomerFollowRecordService;	}	}
