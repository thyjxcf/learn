package net.zdsoft.office.customer.service.impl;import java.util.*;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.collections.MapUtils;import net.zdsoft.office.customer.entity.OfficeCustomerFollowRecord;import net.zdsoft.office.customer.service.OfficeCustomerFollowRecordService;import net.zdsoft.office.customer.dao.OfficeCustomerFollowRecordDao;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.keel.util.Pagination;/** * office_customer_follow_record  * @author  *  */public class OfficeCustomerFollowRecordServiceImpl implements OfficeCustomerFollowRecordService{	private OfficeCustomerFollowRecordDao officeCustomerFollowRecordDao;	private UserService userService;		/**	 * 新增office_customer_follow_record	 * @param officeCustomerFollowRecord	 * @return	 */	@Override	public OfficeCustomerFollowRecord save(OfficeCustomerFollowRecord officeCustomerFollowRecord){		return officeCustomerFollowRecordDao.save(officeCustomerFollowRecord);	}		/**	 * 根据ids数组删除office_customer_follow_record数据	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeCustomerFollowRecordDao.delete(ids);	}		/**	 * 更新office_customer_follow_record	 * @param officeCustomerFollowRecord	 * @return	 */	@Override	public Integer update(OfficeCustomerFollowRecord officeCustomerFollowRecord){		return officeCustomerFollowRecordDao.update(officeCustomerFollowRecord);	}	@Override	public List<OfficeCustomerFollowRecord> getFollowerRecordApplyId(String userId){		return officeCustomerFollowRecordDao.getFollowerRecordApplyId(userId);	}	@Override	public Integer updateApplyId(String newApplyId,String everApplyId){				return officeCustomerFollowRecordDao.updateApplyId(newApplyId,everApplyId);	}		/**	 * 根据id获取office_customer_follow_record	 * @param id	 * @return	 */	@Override	public OfficeCustomerFollowRecord getOfficeCustomerFollowRecordById(String id){		return officeCustomerFollowRecordDao.getOfficeCustomerFollowRecordById(id);	}		/**	 * 根据ids数组查询office_customer_follow_recordmap	 * @param ids	 * @return	 */	@Override	public Map<String, OfficeCustomerFollowRecord> getOfficeCustomerFollowRecordMapByIds(String[] ids){		return officeCustomerFollowRecordDao.getOfficeCustomerFollowRecordMapByIds(ids);	}		/**	 * 获取office_customer_follow_record列表	 * @return	 */	@Override	public List<OfficeCustomerFollowRecord> getOfficeCustomerFollowRecordList(String applyId){		List<OfficeCustomerFollowRecord> recordList=officeCustomerFollowRecordDao.getOfficeCustomerFollowRecordList(applyId);		if(CollectionUtils.isNotEmpty(recordList)){			Set<String> set=new HashSet<String>();			for(OfficeCustomerFollowRecord record:recordList){				set.add(record.getCarbonCopyId());			}			Map<String,User> userMap=userService.getUsersMap(set.toArray(new String[0]));			if(MapUtils.isNotEmpty(userMap)){				for(OfficeCustomerFollowRecord record:recordList){					User user=userMap.get(record.getCarbonCopyId());					record.setCarbonCopyName(user!=null?user.getRealname():null);				}			}		}		return recordList;	}		/**	 * 分页获取office_customer_follow_record列表	 * @param page	 * @return	 */	@Override	public List<OfficeCustomerFollowRecord> getOfficeCustomerFollowRecordPage(Pagination page){		return officeCustomerFollowRecordDao.getOfficeCustomerFollowRecordPage(page);	}			public void setOfficeCustomerFollowRecordDao(OfficeCustomerFollowRecordDao officeCustomerFollowRecordDao){		this.officeCustomerFollowRecordDao = officeCustomerFollowRecordDao;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	}
