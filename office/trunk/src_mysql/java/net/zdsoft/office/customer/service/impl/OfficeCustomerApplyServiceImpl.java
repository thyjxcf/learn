package net.zdsoft.office.customer.service.impl;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import net.zdsoft.eis.base.auditflow.manager.FlowInvoke;import net.zdsoft.eis.base.auditflow.manager.entity.FlowApply;import net.zdsoft.eis.base.auditflow.manager.entity.FlowAudit;import net.zdsoft.eis.base.auditflow.manager.service.impl.AbstractApplyBusinessServiceImpl;import net.zdsoft.eis.base.common.entity.CustomRole;import net.zdsoft.eis.base.common.entity.CustomRoleUser;import net.zdsoft.eis.base.common.entity.Dept;import net.zdsoft.eis.base.common.entity.Teacher;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.CustomRoleService;import net.zdsoft.eis.base.common.service.CustomRoleUserService;import net.zdsoft.eis.base.common.service.DeptService;import net.zdsoft.eis.base.common.service.RegionService;import net.zdsoft.eis.base.common.service.TeacherService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.keel.util.DateUtils;import net.zdsoft.keel.util.Pagination;import net.zdsoft.keelcnet.config.ContainerManager;import net.zdsoft.office.customer.constant.OfficeCustomerConstants;import net.zdsoft.office.customer.dao.OfficeCustomerApplyDao;import net.zdsoft.office.customer.entity.OfficeCustomerApply;import net.zdsoft.office.customer.entity.OfficeCustomerFollowRecord;import net.zdsoft.office.customer.entity.OfficeCustomerInfo;import net.zdsoft.office.customer.entity.SearchCustomer;import net.zdsoft.office.customer.service.OfficeCustomerApplyService;import net.zdsoft.office.customer.service.OfficeCustomerBusinessApplyAuditService;import net.zdsoft.office.customer.service.OfficeCustomerFollowRecordService;import net.zdsoft.office.customer.service.OfficeCustomerInfoService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang.StringUtils;/** * office_customer_apply  * @author  *  *//** * office_customer_apply  * @author  *  *//** * office_customer_apply  * @author  *  */public class OfficeCustomerApplyServiceImpl extends AbstractApplyBusinessServiceImpl<OfficeCustomerApply> implements OfficeCustomerApplyService{		private Set<String> deptIds;		private OfficeCustomerBusinessApplyAuditService officeCustomerBusinessApplyAuditService;	private TeacherService teacherService;	private CustomRoleService customRoleService;	private DeptService deptService;	private OfficeCustomerApplyDao officeCustomerApplyDao;	private OfficeCustomerInfoService officeCustomerInfoService;	private UserService userService;	private OfficeCustomerFollowRecordService officeCustomerFollowRecordService;	private RegionService regionService;	private CustomRoleUserService customRoleUserService;			public void setCustomRoleUserService(			CustomRoleUserService customRoleUserService) {		this.customRoleUserService = customRoleUserService;	}		public void setRegionService(RegionService regionService) {		this.regionService = regionService;	}		public void setCustomRoleService(CustomRoleService customRoleService) {		this.customRoleService = customRoleService;	}		public void setDeptService(DeptService deptService) {		this.deptService = deptService;	}		public void setTeacherService(TeacherService teacherService) {		this.teacherService = teacherService;	}		public void setOfficeCustomerBusinessApplyAuditService(			OfficeCustomerBusinessApplyAuditService officeCustomerBusinessApplyAuditService) {		this.officeCustomerBusinessApplyAuditService = officeCustomerBusinessApplyAuditService;	}		/**	 * 根据ids数组删除office_customer_apply数据	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeCustomerApplyDao.delete(ids);	}	@Override	public Integer deletePutOffCustomer(String unitId){		Date a=new Date();		Calendar c=Calendar.getInstance();		c.add(Calendar.DAY_OF_MONTH,-3);		officeCustomerApplyDao.deletePutOffCustomer(unitId,c.getTime());		return officeCustomerInfoService.saveAddTime(new Date());	}	/**	 * 更新office_customer_apply	 * @param officeCustomerApply	 * @return	 */	@Override	public Integer update(OfficeCustomerApply officeCustomerApply){		/*//3-1		if(officeCustomerApply.getState()==OfficeCustomerConstants.LEVEL_APPLY_FLOW_FINALLY_UNPASS){			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_PASS);		//3-1		}else if(officeCustomerApply.getState()==OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_UNPASS){			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOWING);		}else{//0-1*/		officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOWING);		schFlowApplyService.saveSubmitFlowApply(officeCustomerApply.getApplyId());		return officeCustomerApplyDao.update(officeCustomerApply);	}	@Override	public Integer updateFollowerId(OfficeCustomerApply officeCustomerApply){		Date time=null;		//添加一个字段，表示已选择开试听课过一次。		OfficeCustomerApply apply=officeCustomerApplyDao.getOfficeCustomerApplyById(officeCustomerApply.getId());		if(officeCustomerApply.getOfficeCustomerInfo().getProgressState().equals("04") 				&&(StringUtils.isEmpty(apply.getOpenLecture()) || !apply.getOpenLecture().equals(OfficeCustomerConstants.OPEN_LECTURE_ONCE))){//当1时，表明该申请已因开试听课加一个月了			Calendar c=Calendar.getInstance();			c.setTime(apply.getDeadline());			c.add(Calendar.MONTH,1);			time=c.getTime();						officeCustomerApply.setOpenLecture(OfficeCustomerConstants.OPEN_LECTURE_ONCE);		}		//如果选择跟踪结束或者合同终止		boolean flag=false;		if(officeCustomerApply.getOfficeCustomerInfo().getProgressState().equals("05")				||officeCustomerApply.getOfficeCustomerInfo().getProgressState().equals("09")){			flag=true;		}				return officeCustomerApplyDao.updateFollowerId(officeCustomerApply,time,flag);	}	@Override	public Integer updateIsDelete(boolean flag,String id){		return officeCustomerApplyDao.updateIsDelete(flag, id);	}	@Override	public OfficeCustomerApply putOffApply(OfficeCustomerApply officeCustomerApply){		String everApplyId=officeCustomerApply.getId();		String applyUserId=officeCustomerApply.getApplyUserId();		String applyUserName=officeCustomerApply.getApplyUserName();		//获取原本的信息		OfficeCustomerApply everApply=officeCustomerApplyDao.getOfficeCustomerApplyById(everApplyId);		//将原本的数据is_delete改成1		officeCustomerApplyDao.updateIsDelete(true,everApplyId);				everApply.setApplyType(OfficeCustomerConstants.APPLY_PUT_OFF);		//everApply.setDeadline(officeCustomerApply.getPutOffTime());		everApply.setDelayInfo(officeCustomerApply.getDelayInfo());		everApply.setCreateTime(new Date());		everApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOWING);		everApply.setId(null);		officeCustomerApply=officeCustomerApplyDao.save(everApply);				FlowApply flowApply=new FlowApply(				officeCustomerBusinessApplyAuditService.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE));		flowApply.setBusinessId(officeCustomerApply.getId());		flowApply.setBusinessType(OfficeCustomerConstants.BUSINESS_TYPE);		flowApply.setOperateType(FlowApply.OPERATE_TYPE_NO);		flowApply.setApplyUserId(applyUserId);		flowApply.setApplyUsername(applyUserName);		flowApply.setApplyUnitId(officeCustomerApply.getUnitId());		flowApply.setApplyDate(new Date());		flowApply.setStatus(FlowApply.STATUS_IN_AUDIT);		schFlowApplyService.addFlowApply(flowApply);		//修改跟进记录对呀的apply_id		officeCustomerFollowRecordService.updateApplyId(officeCustomerApply.getId(),everApplyId);		return officeCustomerApply;	}	/**	 * 新增office_customer_apply	 * @param officeCustomerApply	 * @return	 */	@Override	public OfficeCustomerApply save(OfficeCustomerApply officeCustomerApply){		OfficeCustomerInfo info=officeCustomerApply.getOfficeCustomerInfo();		if(StringUtils.isNotBlank(info.getId())){			//若有客户信息id 则是资源库申请。			info.setState(OfficeCustomerConstants.INFO_APPLY);			officeCustomerInfoService.update(info);		}else{			//新增申请			info.setState(OfficeCustomerConstants.INFO_APPLY);			info=officeCustomerInfoService.save(info);		}		//新增申请时的保存为0  提交为1		if(info.getAuditState()==FlowApply.STATUS_IN_AUDIT){			officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOWING);		}		officeCustomerApply.setCustomerId(info.getId());		officeCustomerApply.setCreateTime(new Date());		officeCustomerApply=officeCustomerApplyDao.save(officeCustomerApply);				FlowApply flowApply=new FlowApply(				officeCustomerBusinessApplyAuditService.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE));		flowApply.setBusinessId(officeCustomerApply.getId());		flowApply.setBusinessType(OfficeCustomerConstants.BUSINESS_TYPE);		flowApply.setOperateType(FlowApply.OPERATE_TYPE_NO);		flowApply.setApplyUserId(officeCustomerApply.getApplyUserId());		flowApply.setApplyUsername(officeCustomerApply.getApplyUserName());		flowApply.setApplyUnitId(officeCustomerApply.getUnitId());		flowApply.setApplyDate(new Date());		//保存时0  提交1（页面传入）		flowApply.setStatus(info.getAuditState());		schFlowApplyService.addFlowApply(flowApply);		return officeCustomerApply;	}	@Override	public Integer deleteAll(OfficeCustomerApply officeCustomerApply,String applyId) {		officeCustomerApplyDao.delete(new String[]{officeCustomerApply.getId()});		officeCustomerInfoService.delete(new String[]{officeCustomerApply.getCustomerId()});		schFlowApplyService.deleteFlowApply(officeCustomerBusinessApplyAuditService				.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE), new String[]{applyId});		return null;	}	/**	 * 根据id获取office_customer_apply	 * @param id	 * @return	 */	@Override	public OfficeCustomerApply getOfficeCustomerApplyById(String id){		OfficeCustomerApply apply=officeCustomerApplyDao.getOfficeCustomerApplyById(id);		Calendar c=Calendar.getInstance();		if(apply.getDeadline()!=null){			c.setTime(apply.getDeadline());		}		c.add(Calendar.MONTH,1);		apply.setPutOffTime(c.getTime());		if(StringUtils.isNotBlank(apply.getFollowerId())){			apply.setFollowerName(userService.getUser(apply.getFollowerId()).getRealname());		}		return apply;	}		/**	 * 根据ids数组查询office_customer_applymap	 * @param ids	 * @return	 */	@Override	public Map<String, OfficeCustomerApply> getOfficeCustomerApplyMapByIds(String[] ids){		return officeCustomerApplyDao.getOfficeCustomerApplyMapByIds(ids);	}		/**	 * 获取office_customer_apply列表	 * @return	 */	@Override	public List<OfficeCustomerApply> getOfficeCustomerApplyList(){		return officeCustomerApplyDao.getOfficeCustomerApplyList();	}		/**	 * 分页获取office_customer_apply列表	 * @param page	 * @return	 */	@Override	public List<OfficeCustomerApply> getOfficeCustomerApplyPage(Pagination page){		return officeCustomerApplyDao.getOfficeCustomerApplyPage(page);	}	@Override	public OfficeCustomerApply addCustomer(			OfficeCustomerApply officeCustomerApply) {		Calendar c=Calendar.getInstance();		if(officeCustomerApply.getOfficeCustomerInfo().getProgressState().equals("04")){			//选择开试听课			c.add(Calendar.MONTH,2);			officeCustomerApply.setOpenLecture(OfficeCustomerConstants.OPEN_LECTURE_ONCE);		}else{			c.add(Calendar.MONTH,1);		}		officeCustomerApply.setApplyType(OfficeCustomerConstants.APPLY_TRANS);		officeCustomerApply.setState(OfficeCustomerConstants.LEVEL_APPLY_FLOW_FINALLY_PASS);		officeCustomerApply.setDeadline(c.getTime());		officeCustomerApply.setCreateTime(new Date());		return officeCustomerApplyDao.save(officeCustomerApply);	}

	@Override
	public List<OfficeCustomerApply> getOfficeCustomerApplyByUnitIdList(String unitId){
		return officeCustomerApplyDao.getOfficeCustomerApplyByUnitIdList(unitId);
	}	@Override	public List<OfficeCustomerApply> getAllList(SearchCustomer searchCustomer,String unitId,String userId,boolean cilent,boolean deptLeader,boolean regionLeader, Pagination page){		List<User> userList=null;		if(StringUtils.isEmpty(searchCustomer.getDeptId())){			if(!cilent){//如果是运营人员 且未选中部门  则显示该单位下全部人员				User user = userService.getUser(userId);				String deptId=null;				if(user != null){					Teacher t = teacherService.getTeacher(user.getTeacherid());					if(t!=null){						deptId = t.getDeptid();					}				}				if(deptLeader){					Set<String> departIds = getLeadDeptIds(unitId,userId);					deptIds=null;					for(String departId :departIds){						getAllDeptId(departId);					}					userList = userService.getUsersByDeptIds(deptIds.toArray(new String[0]));				}else if(regionLeader){					//获取本部门以及下级部门id					if(StringUtils.isBlank(deptId))						return null;					//遍历获取下级部门					deptIds=null;					getAllDeptId(deptId);					//获取部门教职工					userList = userService.getUsersByDeptIds(deptIds.toArray(new String[0]));				}			}		}else{			deptIds=null;			getAllDeptId(searchCustomer.getDeptId());			userList = userService.getUsersByDeptIds(deptIds.toArray(new String[0]));		}		Set<String> set=new HashSet<String>();		if(CollectionUtils.isNotEmpty(userList)){			for(User user:userList){				set.add(user.getId());			}		}		if(StringUtils.isNotEmpty(searchCustomer.getFollowerName())){			searchCustomer.setFollowerIds(getFollowerIds(searchCustomer.getFollowerName(),unitId));		}		if(StringUtils.isNotBlank(searchCustomer.getRegion())&&searchCustomer.getRegion().length()==6){			String region =searchCustomer.getRegion();			String regionPr=region.substring(0, 2);			String regionCi=region.substring(2, 4);			String regionCo=region.substring(4, 6);			StringBuilder regionBuilder=new StringBuilder(regionPr);			if(!regionCi.equals("00")){				regionBuilder.append(regionCi);			}			if(!regionCo.equals("00")){				regionBuilder.append(regionCo);			}			searchCustomer.setRegion(regionBuilder.toString());		}		List<OfficeCustomerApply> applyList=officeCustomerApplyDao.getAllList(searchCustomer,set.toArray(new String[0]),unitId,userId,cilent,page);		applyList=setProperty(applyList, userId, true);				return applyList;	}	public String[] getFollowerIds(String followerName,String unitId){			List<User> userList=userService.getUsersFaintness(followerName,unitId);			String[] followerIds=null;			if(CollectionUtils.isNotEmpty(userList)){				int l=userList.size();				followerIds=new String[l];				for(int i=0;i<l;i++){					followerIds[i]=userList.get(i).getId();				}			}else{				followerIds=new String[]{" "};			}			return followerIds;	}	@Override
	public List<OfficeCustomerApply> getMyCustomerByUnitIdPage(String unitId,			String userId,SearchCustomer searchCustomer,Pagination page){		if(StringUtils.isNotEmpty(searchCustomer.getFollowerName())){			searchCustomer.setFollowerIds(getFollowerIds(searchCustomer.getFollowerName(),unitId));		}		//得到被抄送的申请id		List<OfficeCustomerFollowRecord> recordList=officeCustomerFollowRecordService.getFollowerRecordApplyId(userId);		Set<String> set=new HashSet<String>();		if(CollectionUtils.isNotEmpty(recordList)){			for(OfficeCustomerFollowRecord record:recordList){				set.add(record.getApplyId());			}		}else{			set.add("00");		}		List<OfficeCustomerApply> applyList=officeCustomerApplyDao.				getMyCustomerByUnitIdPage(unitId,userId,searchCustomer,set.toArray(new String[0]),page);		//officeCustomerApplyDao.getFollowerRecordList(unitId,userId,searchCustomer,page);		/*List<OfficeCustomerApply> applyListNosubmit=officeCustomerApplyDao.getOfficeCustomerApplyForNosubmit(set.toArray(new String[0]), unitId, userId, page);		if(CollectionUtils.isNotEmpty(applyListNosubmit)){			applyList.addAll(applyListNosubmit);		}*/		applyList=setProperty(applyList, userId, true);		return applyList;	}
	@Override
	public List<OfficeCustomerApply> getOfficeCustomerApplyByUnitIdPage(String unitId,String userId,SearchCustomer searchCustomer,Pagination page){
		List<OfficeCustomerApply> applyList=officeCustomerApplyDao.getOfficeCustomerApplyByUnitIdPage(unitId,userId,searchCustomer, page);		applyList=setProperty(applyList, userId, false);		return applyList;
	}	public List<OfficeCustomerApply> setProperty(List<OfficeCustomerApply> applyList,String userId,boolean flag){		String[] customerIds=null;		String[] applyIds=null;		String[] followerIds=null;		if(CollectionUtils.isNotEmpty(applyList)){			int l=applyList.size();			customerIds=new String[l];			applyIds=new String[l];			followerIds=new String[l];			Set<String> set=new HashSet<String>();			int i=0;			for(OfficeCustomerApply apply:applyList){				customerIds[i]=apply.getCustomerId();				applyIds[i]=apply.getApplyId();				followerIds[i]=apply.getFollowerId();				if(apply.getApplyType().equals(OfficeCustomerConstants.APPLY_PUT_OFF)){					set.add(apply.getId());				}				i++;			}			Map<String,OfficeCustomerInfo> customerInfoMap=officeCustomerInfoService.getOfficeCustomerInfoMapByIds(customerIds);			List<FlowApply> flowApplyList=schFlowApplyService.getFlowApplysByBusinessIds(set.toArray(new String[0]));			Map<String,FlowApply> flowApplyMap=schFlowApplyService.getFlowApplyMapByBusinessIds(set.toArray(new String[0]));			boolean flowApplyFlag=MapUtils.isNotEmpty(flowApplyMap);			if(flowApplyFlag){				Set<String> flowApplyId=new HashSet<String>();				Iterator<String> it=flowApplyMap.keySet().iterator();				while(it.hasNext()){					flowApplyId.add(flowApplyMap.get(it.next()).getId());				}				applyIds=flowApplyId.toArray(new String[0]);			}			Map<String, List<FlowAudit>> auditMap = schFlowAuditService.getFlowAuditsMap(applyIds);			Map<String,User> userMap=userService.getUserMap(applyList.get(0).getUnitId());			Map<String,String> regionMap=regionService.getRegionFullCodeMap();			Map<String,String>  deptMap=getTopDeptNameMap(applyList.get(0).getUnitId(), followerIds);			boolean regionFlag=MapUtils.isNotEmpty(regionMap);			boolean flagInfo=MapUtils.isNotEmpty(customerInfoMap);			boolean flagAudit=MapUtils.isNotEmpty(auditMap);			boolean flagUser=MapUtils.isNotEmpty(userMap);			boolean flagDept=MapUtils.isNotEmpty(deptMap);			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");			Date d1=new Date();			for(OfficeCustomerApply apply:applyList){					if(apply.getDeadline()!=null){						long d=DateUtils.string2Date(DateUtils.date2String(apply.getDeadline(), "yyyy-MM-dd"), "yyyy-MM-dd").getTime()-								DateUtils.string2Date(DateUtils.date2String(d1, "yyyy-MM-dd"), "yyyy-MM-dd").getTime();						apply.setValidTime(d/(24*60*60*1000));					}					if(flagInfo){						OfficeCustomerInfo c=customerInfoMap.get(apply.getCustomerId());						if(regionFlag){							c.setRegionName(regionMap.get(c.getRegion()));						}						if(c!=null){							apply.setOfficeCustomerInfo(c);						}					}					if(flagAudit){						String applyId=apply.getApplyId();						if(StringUtils.isEmpty(applyId)&&flowApplyFlag){							FlowApply flowApply=flowApplyMap.get(apply.getId());							if(flowApply!=null){								applyId=flowApply.getId();							}						}						List<FlowAudit> auditList=auditMap.get(applyId);						if(CollectionUtils.isNotEmpty(auditList)){							int len=auditList.size();							if(len==1){								apply.setOperateOpinion(auditList.get(0).getOpinion());							}else{								if(len>0){									apply.setDeptOpinion(auditList.get(0).getOpinion());								}								if(len>1){									apply.setOperateOpinion(auditList.get(1).getOpinion());								}							}						}					}					if(flag&&flagUser){						User user=userMap.get(apply.getFollowerId());						if(userId.equals(apply.getFollowerId())){							//apply.setFollowerName("我");							apply.setOneSelf(true);						}						apply.setFollowerName(user!=null?user.getRealname():"该用户已被删除");						if(user!=null&&flagDept){								apply.setDeptName(deptMap.get(user.getDeptid()));						}					}			}		}		return applyList;	}	public void setOfficeCustomerApplyDao(OfficeCustomerApplyDao officeCustomerApplyDao){		this.officeCustomerApplyDao = officeCustomerApplyDao;	}	public void setOfficeCustomerInfoService(			OfficeCustomerInfoService officeCustomerInfoService) {		this.officeCustomerInfoService = officeCustomerInfoService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}		public List<OfficeCustomerApply> getCustomerApplyAuditList(OfficeCustomerApply ent, String userId, String queryStatus, String roleCode, SearchCustomer customer, String[] applyTypes, Pagination page){		List<OfficeCustomerApply> list = new ArrayList<OfficeCustomerApply>();		CustomRole role = customRoleService.getCustomRoleByRoleCode(ent.getUnitId(), roleCode);		Set<String> arrangeIds = new HashSet<String>();		if(StringUtils.equals(roleCode, OfficeCustomerConstants.OFFCIE_DEPT_LEADER)){//部门负责人			arrangeIds = getLeadDeptIds(ent.getUnitId(), userId);		}else if(StringUtils.equals(roleCode, OfficeCustomerConstants.OFFICE_CLIENT_MANAGER)){//运营人员			String arrangeId = getSchoolId(userId, null);			arrangeIds.add(arrangeId);		}				if(arrangeIds.size()==0)			return list;				list = officeCustomerApplyDao.getCustomerApplyAuditList(ent, queryStatus, role.getId(), FlowApply.OPERATE_TYPE_NO, arrangeIds.toArray(new String[0]), customer, applyTypes, page);		Set<String> customerIds = new HashSet<String>();		Set<String> userIds = new HashSet<String>();		Set<String> followUserIds = new HashSet<String>();		for(OfficeCustomerApply c : list){			customerIds.add(c.getCustomerId());			userIds.add(c.getApplyUserId());			followUserIds.add(c.getFollowerId());		}		Map<String, OfficeCustomerInfo> cmap = officeCustomerInfoService.getOfficeCustomerInfoMapByIds(customerIds.toArray(new String[0]));		Map<String,String> regionMap=regionService.getRegionFullCodeMap();		Map<String, User> userMap = userService.getUserMap(ent.getUnitId());		Map<String, String> deptMap = this.getTopDeptNameMap(ent.getUnitId(), userIds.toArray(new String[0]));		for(OfficeCustomerApply c : list){			if(cmap.containsKey(c.getCustomerId())){//				regionMap				OfficeCustomerInfo info = cmap.get(c.getCustomerId());				if(regionMap.containsKey(info.getRegion())){					info.setRegionName(regionMap.get(info.getRegion()));				}				c.setOfficeCustomerInfo(info);			}			if(userMap.containsKey(c.getApplyUserId())){				User user = userMap.get(c.getApplyUserId());				if(user != null){					c.setApplyUserName(user.getRealname());					if(deptMap.containsKey(user.getDeptid())){						c.setDeptName(deptMap.get(user.getDeptid()));					}				}			}			if(userMap.containsKey(c.getFollowerId())){				User user = userMap.get(c.getFollowerId());				if(user != null){					c.setFollowerName(user.getRealname());				}			}		}				return list;	}		public void saveContestStususclaAudit(FlowAudit audit, OfficeCustomerApply customer, String auditId, String roleCode){		FlowAudit flowaudit = schFlowAuditService.getFlowAudit(auditId);		if(audit.getBusinessType() == OfficeCustomerConstants.BUSINESS_TYPE_2){			schFlowApplyService.saveAudits(officeCustomerBusinessApplyAuditService.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE_2), audit, auditId);		}else{			schFlowApplyService.saveAudits(officeCustomerBusinessApplyAuditService.getApplyBusinessService(OfficeCustomerConstants.BUSINESS_TYPE), audit, auditId);		}				//更新业务表申请状态 以及 截止日期		int state = 0;		int customerState = 0;		Date addTime = null;		Date deadLineTime = null;		if(OfficeCustomerConstants.OFFCIE_DEPT_LEADER.equals(roleCode)){//初审			if(audit.getStatus() == FlowAudit.STATUS_AUDIT_PASS){				state = OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_PASS;			}else if(audit.getStatus() == FlowAudit.STATUS_AUDIT_REJECT){				state = OfficeCustomerConstants.LEVEL_APPLY_FLOW_FIRST_UNPASS;				//客户入资源库(新增客户不入库)				if(!OfficeCustomerConstants.APPLY_NEW.equals(customer.getApplyType())){					customerState = OfficeCustomerConstants.INFO_LIBARAY;					addTime = new Date();				}			}		}else if(OfficeCustomerConstants.OFFICE_CLIENT_MANAGER.equals(roleCode)){//终审			if(audit.getStatus() == FlowAudit.STATUS_AUDIT_PASS || audit.getStatus() == FlowAudit.STATUS_AUDIT_FINISH){				state = OfficeCustomerConstants.LEVEL_APPLY_FLOW_FINALLY_PASS;				OfficeCustomerInfo info=officeCustomerInfoService.getOfficeCustomerInfoById(customer.getCustomerId());				//当申请的客户进展状态为结束时				if(info.getProgressState().equals("05") ||info.getProgressState().equals("09")){					customerState=OfficeCustomerConstants.INFO_LIBARAY;					customer.setIsdeleted(true);				}else{					customerState = OfficeCustomerConstants.INFO_FLOWING;				}				//截止日期一个月				Date date = null;				if(OfficeCustomerConstants.APPLY_PUT_OFF.equals(customer.getApplyType())){//延期申请					OfficeCustomerApply oldCustomer = officeCustomerApplyDao.getOfficeCustomerApplyById(customer.getId());					date = oldCustomer.getDeadline();					if(date == null){						date = new Date();					}				}else{					date = new Date();				}				Calendar c = Calendar.getInstance();				c.setTime(date);				if(info.getProgressState().equals("04") &&StringUtils.isEmpty(customer.getOpenLecture())){					c.add(Calendar.MONTH, 2);					customer.setOpenLecture(OfficeCustomerConstants.OPEN_LECTURE_ONCE);				}else  c.add(Calendar.MONTH, 1);				deadLineTime = c.getTime();			}else if(audit.getStatus() == FlowAudit.STATUS_AUDIT_REJECT){				state = OfficeCustomerConstants.LEVEL_APPLY_FLOW_FINALLY_UNPASS;				//终审不通过 客户入资源库(新增客户不入库)				if(!OfficeCustomerConstants.APPLY_NEW.equals(customer.getApplyType())){					customerState = OfficeCustomerConstants.INFO_LIBARAY;//					addTime = new Date();				}else{				}			}		}				//更新业务表申请状态 以及 截止日期		customer.setDeadline(deadLineTime);		customer.setState(state);		officeCustomerApplyDao.update(customer);		//更新客户表状态以及入库时间		if(customerState != 0){			officeCustomerInfoService.updateState(customer.getCustomerId(), customerState, addTime);		}			}		public boolean isDeptLeader(String unitId, String userId){		List<Dept> list = deptService.getDirectDepts(unitId);		for(Dept ent : list){			if(StringUtils.isNotBlank(ent.getPrincipan()) && ent.getPrincipan().equals(userId)){				return true;			}		}		return false;	}		public Map<String, String> getTopDeptNameMap(String unitId, String[] userIds){				Map<String, User> userMap = userService.getUsersMap(userIds);		Map<String, Dept> deptMap = deptService.getDeptMap(unitId);		Map<String, String> deptToDeptMap = new HashMap<String, String>();		for(String key : deptMap.keySet()){			Dept dept = deptMap.get(key);			if(Dept.TOP_GROUP_GUID.equals(dept.getParentid())){//如果是顶级部门				deptToDeptMap.put(key, dept.getDeptname());			}else{				String myTopDeptName = returnMyTopDeptName(dept, deptMap);				if(StringUtils.isNotBlank(myTopDeptName)){					deptToDeptMap.put(key, myTopDeptName);				}			}		}				return deptToDeptMap;	}		/**	 * 返回对应的顶级部门名称	 * @param dept	 * @param deptMap	 * @return	 */	private String returnMyTopDeptName(Dept dept, Map<String, Dept> deptMap){		String parentId = dept.getParentid();		if(deptMap.containsKey(parentId)){			Dept pdept = deptMap.get(parentId);			if(Dept.TOP_GROUP_GUID.equals(pdept.getParentid())){//如果是顶级部门				return pdept.getDeptname();			}else{				return returnMyTopDeptName(pdept, deptMap);			}		}else{			return "";		}	}		public List<User> getFollowUserList(String unitId, String userId){		boolean isRegionLeader = false;		boolean isDeptLeader = false;		boolean isClientManager = false;		String deptId = "";		deptIds = new HashSet<String>();				List<CustomRole> list = customRoleService.getCustomRoleListByUserId(unitId, userId, OfficeCustomerConstants.SUBSYSTEM_ID);		for(CustomRole ent : list){			if(ent.getRoleCode().equals(OfficeCustomerConstants.OFFICE_REGION_LEADER)){//地区负责人				isRegionLeader = true;			}else if(ent.getRoleCode().equals(OfficeCustomerConstants.OFFICE_CLIENT_MANAGER)){//运营人员				isClientManager = true; 			}		}				List<User> tlist = new ArrayList<User>();		Set<String> teacherIds = new HashSet<String>();		if(isClientManager){//运营人员--查看所有人员			tlist = userService.getUsers(unitId);		}else{			User user = userService.getUser(userId);			if(user != null){				isDeptLeader = this.isDeptLeader(unitId, userId);				Teacher t = teacherService.getTeacher(user.getTeacherid());				if(t!=null){					deptId = t.getDeptid();				}			}						if(isDeptLeader || isRegionLeader){				//获取本部门以及下级部门id				if(StringUtils.isBlank(deptId))					return null;				//遍历获取下级部门				getAllDeptId(deptId);				//获取部门教职工				tlist = userService.getUsersByDeptIds(deptIds.toArray(new String[0]));							}		}				return removerUsers(unitId, tlist);	}		//获取可以抄送的人员	public List<User> getCpopyUserList(String unitId, String userId){		List<User> tlist = new ArrayList<User>();		deptIds = new HashSet<String>();		User user = userService.getUser(userId);		String deptId = user.getDeptid();		deptIds.add(deptId);//		if(isDeptLeader(unitId, userId)){//事业部负责人//			//获取本部门以及下级部门id//			if(StringUtils.isBlank(deptId))//				return null;			//遍历获取下级部门			getAllDeptId(deptId);//			//获取部门教职工//		}else{//			//		}		tlist = userService.getUsersByDeptIds(deptIds.toArray(new String[0]));				return removerUsers(unitId, tlist);	}		/**	 * 去除运营人员	 * @return	 */	private List<User> removerUsers(String unitId, List<User> list){		CustomRole role = customRoleService.getCustomRoleByRoleCode(unitId, OfficeCustomerConstants.OFFICE_CLIENT_MANAGER);		Map<String,List<CustomRoleUser>> map = customRoleUserService.getCustomRoleUserMap(unitId, new String[]{role.getId()});		Set<String> removeIds = new HashSet<String>();		if(map!=null && map.size()>0){			List<CustomRoleUser> clist = map.get(role.getId());			for(CustomRoleUser ent : clist){				removeIds.add(ent.getUserId());			}		}				List<User> removerUsers = new ArrayList<User>();		for(User ent : list){			if(removeIds.contains(ent.getId())){				removerUsers.add(ent);			}		}		list.removeAll(removerUsers);		return list;	}		private void getAllDeptId(String deptId){		if(deptIds == null)			deptIds = new HashSet<String>();				deptIds.add(deptId);		//获取下级部门		List<Dept> list = deptService.getDeptsByParentId(deptId);		if(list==null || list.size()==0){			return;		}else{			for(Dept dept : list){				getAllDeptId(dept.getId());			}		}	}		@Override	public String getArrangeId(String userId, String method, String type,String businessId) {		String[] params = new String[] { userId, type };		try {			return FlowInvoke.getArrangeId(new OfficeCustomerApplyServiceImpl(),					method, params);		} catch (Exception e) {			e.printStackTrace();			return null;		}	}		/**	 * 获取所负责部门的部门id	 * @param userId	 * @return	 */	private Set<String> getLeadDeptIds(String unitId, String userId){		Set<String> deptIds = new HashSet<String>();		List<Dept> list = deptService.getDirectDepts(unitId);		for(Dept ent : list){			if(userId.equals(ent.getPrincipan())){				deptIds.add(ent.getId());			}		}				return deptIds;	}		//获取所属顶级部门的deptid	public String getDeptId(String userId,String type){		if (null == userService) {			userService = (UserService) ContainerManager.getComponent("userService");		}		if (null == teacherService) {			teacherService = (TeacherService) ContainerManager.getComponent("teacherService");		}		if (null == deptService) {			deptService = (DeptService) ContainerManager.getComponent("deptService");		}		User user = userService.getUser(userId);		String deptId = "";		if(user != null){			Teacher t = teacherService.getTeacher(user.getTeacherid());			if(t != null)				deptId = t.getDeptid();		}		//根据deptId找到对应的顶级部门id		if(StringUtils.isNotBlank(deptId)){			Dept dept = deptService.getDept(deptId);			if(dept==null){				return "";			}			while (true) {				if(dept!=null && StringUtils.endsWith(dept.getParentid(), Dept.TOP_GROUP_GUID)){					break;				}				dept = deptService.getDept(dept.getParentid());			}			if(dept != null){				deptId = dept.getId();			}		}		return deptId;	}		public String getSchoolId(String userId, String type) {		if (null == userService) {			userService = (UserService) ContainerManager.getComponent("userService");		}		return userService.getUser(userId).getUnitid();	}		public OfficeCustomerApply getEntity() {		OfficeCustomerApply ent = new OfficeCustomerApply();		ent.setFlowTypeValue(OfficeCustomerConstants.BUSINESS_TYPE);		return ent;	}		//最终审核通过之后	public void saveDisposeBusiness(FlowApply apply) {//		OfficeAssetApply ent = officeAssetApplyDao.getOfficeAssetApplyById(apply.getBusinessId());//		ent.setIsPassApply(true);//		ent.setPurchaseState(String.valueOf(FlowAudit.STATUS_PREPARING));//		ent.setCreationTime(new Date());//		officeAssetApplyDao.update(ent);	}	public void setOfficeCustomerFollowRecordService(			OfficeCustomerFollowRecordService officeCustomerFollowRecordService) {		this.officeCustomerFollowRecordService = officeCustomerFollowRecordService;	}	}
