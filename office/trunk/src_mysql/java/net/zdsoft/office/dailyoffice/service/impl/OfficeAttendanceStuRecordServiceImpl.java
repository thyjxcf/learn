package net.zdsoft.office.dailyoffice.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import net.zdsoft.eis.base.common.entity.BasicClass;import net.zdsoft.eis.base.common.entity.Student;import net.zdsoft.eis.base.common.entity.Unit;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.BasicClassService;import net.zdsoft.eis.base.common.service.StudentService;import net.zdsoft.eis.base.common.service.SystemIniService;import net.zdsoft.eis.base.common.service.UnitService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.eis.base.constant.BaseConstant;import net.zdsoft.eis.base.subsystemcall.entity.EduadmCourseDto;import net.zdsoft.eis.base.subsystemcall.service.EduadmSubsystemService;import net.zdsoft.eisu.base.common.entity.TeachPlace;import net.zdsoft.eisu.base.common.service.TeachPlaceService;import net.zdsoft.keel.util.DateUtils;import net.zdsoft.office.dailyoffice.dao.OfficeAttendanceStuRecordDao;import net.zdsoft.office.dailyoffice.dto.AttendanceDto;import net.zdsoft.office.dailyoffice.entity.OfficeAttendanceStuRecord;import net.zdsoft.office.dailyoffice.service.OfficeAttendanceStuRecordService;import net.zdsoft.office.dailyoffice.service.OfficeUtilityApplyService;import net.zdsoft.office.dailyoffice.sync.constant.OfficeSyncKqConstant;import net.zdsoft.office.dailyoffice.sync.dao.RecordInfoDao;import net.zdsoft.office.dailyoffice.sync.entity.RecordInfo;import net.zdsoft.office.msgcenter.entity.OfficeMsgSending;import net.zdsoft.office.msgcenter.service.OfficeMsgSendingService;import net.zdsoft.office.util.Constants;import org.apache.commons.lang3.StringUtils;import org.apache.ecs.xhtml.map;/** * office_attendance_stu_record  * @author  *  */public class OfficeAttendanceStuRecordServiceImpl implements OfficeAttendanceStuRecordService{	private OfficeAttendanceStuRecordDao officeAttendanceStuRecordDao;	private OfficeUtilityApplyService officeUtilityApplyService;	private UnitService unitService;	private EduadmSubsystemService eduadmSubsystemService;	private StudentService studentService;	private RecordInfoDao recordInfoDao;	private SystemIniService systemIniService;	private BasicClassService basicClassService;	private OfficeMsgSendingService officeMsgSendingService;	private UserService userService;	private TeachPlaceService teachPlaceService;			/**	 * 新增office_attendance_stu_record	 * @param officeAttendanceStuRecord	 * @return	 */	@Override	public OfficeAttendanceStuRecord save(OfficeAttendanceStuRecord officeAttendanceStuRecord){		return officeAttendanceStuRecordDao.save(officeAttendanceStuRecord);	}		/**	 * 根据ids数组删除office_attendance_stu_record数据	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeAttendanceStuRecordDao.delete(ids);	}		/**	 * 更新office_attendance_stu_record	 * @param officeAttendanceStuRecord	 * @return	 */	@Override	public Integer update(OfficeAttendanceStuRecord officeAttendanceStuRecord){		return officeAttendanceStuRecordDao.update(officeAttendanceStuRecord);	}		/**	 * 根据id获取office_attendance_stu_record	 * @param id	 * @return	 */	@Override	public OfficeAttendanceStuRecord getOfficeAttendanceStuRecordById(String id){		return officeAttendanceStuRecordDao.getOfficeAttendanceStuRecordById(id);	}		@Override	public void syncAttendanceData(int currentPeriod, String unitId, String acadyear, String semester, Map<Integer, String> skTimeMap, Map<Integer, String> xkTimeMap) {		//获取上一次同步数据时间		String lastSyncAttendanceTime = getLastUpdateTime();		String[] timeArray = lastSyncAttendanceTime.split("-");		int lastPeriod = AttendanceDto.toComparePeriod(Integer.parseInt(timeArray[1]));		Date startApplyDate = DateUtils.string2Date(timeArray[0], "yyyyMMdd");		Date endApplyDate = DateUtils.string2Date(DateUtils.currentDate2StringByDay(), "yyyy-MM-dd");		List<AttendanceDto> attendanceDtoList = officeUtilityApplyService.getCourseArrange(unitId, startApplyDate, endApplyDate, "3");		List<AttendanceDto> list = new ArrayList<AttendanceDto>();		Map<String, TeachPlace> teachPlaceMap = new HashMap<String, TeachPlace>(); 		//过滤掉节次不在范围内的课程安排		for(AttendanceDto dto : attendanceDtoList) {			if(dto.getDateStr().equals(DateUtils.date2String(startApplyDate, "yyyy-MM-dd"))) {				if(AttendanceDto.toComparePeriod(dto.getEndPeriod()) <= lastPeriod) {					continue;				}			}			if(dto.getDateStr().equals(DateUtils.date2String(endApplyDate, "yyyy-MM-dd"))) {				if(AttendanceDto.toComparePeriod(dto.getEndPeriod()) > currentPeriod) {					continue;				}			}			list.add(dto);		}		int maxSyncVersion = officeAttendanceStuRecordDao.getMaxSyncVersion();		for(AttendanceDto dto : list) {			//获取课程的上课学生			EduadmCourseDto courseDto = eduadmSubsystemService.getEduadmCourseById(dto.getCourseId());			List<Student> stuList = null;			if(courseDto.getStudyType().equals("1")) {				stuList = studentService.getStudents(courseDto.getClassId());			}else {				stuList = eduadmSubsystemService.getStudentByTeachClassId(courseDto.getClassId());			}			List<String> stuCodeList = new ArrayList<String>();			Map<String, Student> studentMap = new HashMap<String, Student>();			for(Student student : stuList) {				stuCodeList.add(student.getStucode());				studentMap.put(student.getStucode(), student);			}			String ControllerID = "";			if(teachPlaceMap.containsKey(dto.getRoomId())) {				ControllerID = teachPlaceMap.get(dto.getRoomId()).getMachineCode();			}else {				TeachPlace teachPlace = teachPlaceService.getTeachPlace(dto.getRoomId());				ControllerID = teachPlace.getMachineCode();				teachPlaceMap.put(dto.getRoomId(), teachPlace);			}			if(StringUtils.isBlank(ControllerID)) {				throw new RuntimeException("获取机房考勤数据：无法获得机房[id='"+dto.getRoomId()+"']的考勤机器编码");			}			//获取课程的打卡有效时间			String[] dateArray = dto.getDateStr().split("-");			String DataDate = dateArray[0]+dateArray[1]+dateArray[2];			String StartTime = getAdvanceTenMinute(skTimeMap.get(AttendanceDto.toComparePeriod(dto.getStartPeriod()))) + "01";			String EndTime = xkTimeMap.get(AttendanceDto.toComparePeriod(dto.getEndPeriod())).split(":")[0] + xkTimeMap.get(AttendanceDto.toComparePeriod(dto.getEndPeriod())).split(":")[1] + "00";			List<RecordInfo> recordInfoList = recordInfoDao.getList(ControllerID, DataDate, StartTime, EndTime, stuCodeList.toArray(new String[] {}));			Map<String, String> dkStuCodeMap = new HashMap<String, String>();			for(RecordInfo recordInfo : recordInfoList) {				dkStuCodeMap.put(recordInfo.getStaffID(), recordInfo.getStaffID());				OfficeAttendanceStuRecord entity = new OfficeAttendanceStuRecord();				entity.setStudentCode(recordInfo.getStaffID());				entity.setStudentName(studentMap.get(recordInfo.getStaffID()).getStuname());				entity.setCourseId(dto.getCourseId());				entity.setDatestr(recordInfo.getDataDate());				entity.setTimestr(recordInfo.getDataTime());				entity.setStartPeriod(dto.getStartPeriod());				entity.setEndPeriod(dto.getEndPeriod());				entity.setRoomId(dto.getRoomId());				entity.setControllerId(recordInfo.getControllerID());				entity.setIsDk(OfficeSyncKqConstant.IS_DK_YES);				entity.setIsRemind(OfficeSyncKqConstant.IS_REMIND_NO);				entity.setSyncDatetime(new Date());				entity.setSyncVersion(maxSyncVersion + 1);				officeAttendanceStuRecordDao.save(entity);			}			for(Student student : stuList) {				if(!dkStuCodeMap.containsKey(student.getStucode())) {					OfficeAttendanceStuRecord entity = new OfficeAttendanceStuRecord();					entity.setStudentCode(student.getStucode());					entity.setStudentName(studentMap.get(student.getStucode()).getStuname());					entity.setCourseId(dto.getCourseId());					entity.setDatestr(DataDate);					entity.setTimestr("");					entity.setStartPeriod(dto.getStartPeriod());					entity.setEndPeriod(dto.getEndPeriod());					entity.setRoomId(dto.getRoomId());					entity.setControllerId(ControllerID);					entity.setIsDk(OfficeSyncKqConstant.IS_DK_NO);					entity.setIsRemind(OfficeSyncKqConstant.IS_REMIND_NO);					entity.setSyncDatetime(new Date());					entity.setSyncVersion(maxSyncVersion + 1);					officeAttendanceStuRecordDao.save(entity);				}			}		}		String[] currentTimeArray = DateUtils.currentDate2StringByDay().split("-");		String lastUpdateTime = currentTimeArray[0] + currentTimeArray[1] + currentTimeArray[2] + "-" + AttendanceDto.toActualPeriod(currentPeriod);		updateLastUpdateTime(lastUpdateTime);	}		@Override	public void sendRemind() {		List<OfficeAttendanceStuRecord> list = officeAttendanceStuRecordDao.getOfficeAttendanceStuRecord(				OfficeSyncKqConstant.IS_DK_NO, OfficeSyncKqConstant.IS_REMIND_NO);		Set<String> stuCodeSet = new HashSet<String>();		for(OfficeAttendanceStuRecord entity : list) {			stuCodeSet.add(entity.getStudentCode());		}		Unit unit = unitService.getNormalLocalUnits().get(0);		List<Student> stuList = studentService.getStudents(unit.getId(), stuCodeSet.toArray(new String[] {}));		Map<String, String> stuCodeClassIdMap = new HashMap<String, String>();		Set<String> classIds = new HashSet<String>();		for(Student student : stuList) {			stuCodeClassIdMap.put(student.getStucode(), student.getClassid());			classIds.add(student.getClassid());		}		List<BasicClass> classList = basicClassService.getClasses(classIds.toArray(new String[] {}));		Map<String, String> classIdTeaIdMap = new HashMap<String, String>();		Set<String> teacherIds = new HashSet<String>();		for(BasicClass basicClass : classList) {			classIdTeaIdMap.put(basicClass.getId(), basicClass.getTeacherid());			teacherIds.add(basicClass.getTeacherid());		}		Map<String, User> userMap = userService.getUserMapByOwner(User.TEACHER_LOGIN, teacherIds.toArray(new String[] {}));		Map<String, EduadmCourseDto> courseMap = new HashMap<String, EduadmCourseDto>();		List<String> successRemindList = new ArrayList<String>();		Map<String, User> teacherIdUserMap = new HashMap<String, User>();		for(OfficeAttendanceStuRecord entity : list) {			try{				EduadmCourseDto courseDto;				if(courseMap.containsKey(entity.getCourseId())) {					courseDto = courseMap.get(entity.getCourseId());				}else {					courseDto = eduadmSubsystemService.getEduadmCourseById(entity.getCourseId());					courseMap.put(entity.getCourseId(), courseDto);					User user = userService.getUsersByOwner(courseDto.getTeacherId()).get(0);					teacherIdUserMap.put(courseDto.getTeacherId(), user);				}								String periodStr = "";				if(entity.getStartPeriod() == 99) {					periodStr = "中午";				}else if(entity.getStartPeriod() == entity.getEndPeriod()) {					periodStr = "第"+ entity.getStartPeriod() + "节";				}else {					periodStr = "第"+ entity.getStartPeriod() + "节到第"+ entity.getEndPeriod() + "节";				}				String smsContent = "您好：<br>"+"  您的学生  "+entity.getStudentName()+ " 同学，于" + 				DateUtils.date2String(DateUtils.string2Date(entity.getDatestr(), "yyyyMMdd"),"yyyy-MM-dd") + 				"(星期"+ getWeekByDate(DateUtils.string2Date(entity.getDatestr(), "yyyyMMdd"))+")" + periodStr + 				" 课程：" + courseDto.getSubjectName()+" 未刷卡到课，请留意。谢谢！";				OfficeMsgSending officeMsgSending = new OfficeMsgSending();				officeMsgSending.setCreateUserId(teacherIdUserMap.get(courseDto.getTeacherId()).getId());				officeMsgSending.setTitle("选修课未刷卡信息反馈");				officeMsgSending.setContent(smsContent);				officeMsgSending.setSimpleContent(smsContent);				officeMsgSending.setUserIds(userMap.get(classIdTeaIdMap.get(stuCodeClassIdMap.get(entity.getStudentCode()))).getId());				officeMsgSending.setSendUserName(teacherIdUserMap.get(courseDto.getTeacherId()).getRealname());				officeMsgSending.setState(Constants.MSG_STATE_SEND);				officeMsgSending.setIsNeedsms(false);				officeMsgSending.setMsgType(BaseConstant.MSG_TYPE_ATTENDANCE);				officeMsgSendingService.save(officeMsgSending, null, null);				successRemindList.add(entity.getId());			}catch(Exception e){ 				System.out.println("推送学生["+ entity.getStudentName() +"]未到信息给班主任报错："); 				e.printStackTrace(); 			}		}		officeAttendanceStuRecordDao.batchUpdateIsRemind(successRemindList.toArray(new String[] {}), OfficeSyncKqConstant.IS_REMIND_YES);	}		public String getWeekByDate(Date date) {		return WEEK_STR_MAP.get(DateUtils.getDayOfWeek(date));	}		public static Map<Integer, String> WEEK_STR_MAP = new HashMap<Integer, String>(); 	static{		WEEK_STR_MAP.put(2, "一");		WEEK_STR_MAP.put(3, "二");		WEEK_STR_MAP.put(4, "三");		WEEK_STR_MAP.put(5, "四");		WEEK_STR_MAP.put(6, "五");		WEEK_STR_MAP.put(7, "六");		WEEK_STR_MAP.put(1, "日");	}		@Override	public int getCount(String courseId, String dateStr, int startPeriod,			int endPeriod, String isDk) {		return officeAttendanceStuRecordDao.getCount(courseId, dateStr, startPeriod, endPeriod, isDk);	}		@Override	public List<OfficeAttendanceStuRecord> getList(String courseId,			String dateStr, int startPeriod, int endPeriod, String isDk) {		return officeAttendanceStuRecordDao.getList(courseId, dateStr, startPeriod, endPeriod, isDk);	}		@Override	public Map<String, Integer> getStuAttendanceCountMap(String courseId) {		return officeAttendanceStuRecordDao.getStuAttendanceCountMap(courseId);	}		@Override	public Map<String, Integer> getStuAttendanceCountMap(String[] stuCodes) {		return officeAttendanceStuRecordDao.getStuAttendanceCountMap(stuCodes);	}		public String getAdvanceTenMinute(String timeStr) {		String[] timeArray = timeStr.split(":");		int time1 = Integer.parseInt(timeArray[0]);		int time2 = Integer.parseInt(timeArray[1]);		if(time1 == 0) {//			throws		}else {			int time = time1*60+time2-10;			time1 = time/60;			time2 = time-time1*60;			String time1Str = time1+"";			String time2Str = time2+"";			if(time1 < 10) {				time1Str = "0" + time1Str;			}			if(time2 < 10) {				time2Str = "0" + time2Str;			}			return time1Str+time2Str;		}		return "";	} 		public void updateLastUpdateTime(String lastUpdateTime) {		if(StringUtils.isNotBlank(lastUpdateTime)) {			systemIniService.updateNowValue(OfficeSyncKqConstant.OFFICE_KQ_SYNC_LAST_TIME, lastUpdateTime);		}	}		public String getLastUpdateTime() {		String dateString = systemIniService.getValue(OfficeSyncKqConstant.OFFICE_KQ_SYNC_LAST_TIME);		if(StringUtils.isNotBlank(dateString)) {			return dateString;		}else {			throw new RuntimeException("获取机房考勤数据：无法获取机房考勤数据同步最近一次的时间");		}	}		public void setOfficeAttendanceStuRecordDao(OfficeAttendanceStuRecordDao officeAttendanceStuRecordDao){		this.officeAttendanceStuRecordDao = officeAttendanceStuRecordDao;	}	public void setOfficeUtilityApplyService(			OfficeUtilityApplyService officeUtilityApplyService) {		this.officeUtilityApplyService = officeUtilityApplyService;	}	public void setUnitService(UnitService unitService) {		this.unitService = unitService;	}	public void setEduadmSubsystemService(			EduadmSubsystemService eduadmSubsystemService) {		this.eduadmSubsystemService = eduadmSubsystemService;	}	public void setStudentService(StudentService studentService) {		this.studentService = studentService;	}	public void setRecordInfoDao(RecordInfoDao recordInfoDao) {		this.recordInfoDao = recordInfoDao;	}	public void setSystemIniService(SystemIniService systemIniService) {		this.systemIniService = systemIniService;	}	public void setBasicClassService(BasicClassService basicClassService) {		this.basicClassService = basicClassService;	}	public void setOfficeMsgSendingService(			OfficeMsgSendingService officeMsgSendingService) {		this.officeMsgSendingService = officeMsgSendingService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public void setTeachPlaceService(TeachPlaceService teachPlaceService) {		this.teachPlaceService = teachPlaceService;	}}