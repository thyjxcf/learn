package net.zdsoft.office.teacherLeave.service.impl;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import net.zdsoft.eis.base.attachment.entity.Attachment;import net.zdsoft.eis.base.attachment.service.AttachmentService;import net.zdsoft.eis.base.common.entity.Dept;import net.zdsoft.eis.base.common.entity.Teacher;import net.zdsoft.eis.base.common.entity.Unit;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.DeptService;import net.zdsoft.eis.base.common.service.SystemIniService;import net.zdsoft.eis.base.common.service.TeacherService;import net.zdsoft.eis.base.common.service.UnitService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.eis.base.constant.BaseConstant;import net.zdsoft.eis.component.flowManage.constant.FlowConstant;import net.zdsoft.eis.sms.constant.SmsConstant;import net.zdsoft.eis.sms.dto.MsgDto;import net.zdsoft.eis.sms.dto.SendDetailDto;import net.zdsoft.eis.sms.service.SmsClientService;import net.zdsoft.jbpm.activiti.engine.task.AgileIdentityLinkType;import net.zdsoft.jbpm.core.entity.Comment;import net.zdsoft.jbpm.core.entity.HistoricTask;import net.zdsoft.jbpm.core.entity.TaskDescription;import net.zdsoft.jbpm.core.entity.TaskHandlerResult;import net.zdsoft.jbpm.core.entity.TaskHandlerSave;import net.zdsoft.jbpm.core.service.ProcessHandlerService;import net.zdsoft.jbpm.core.service.TaskHandlerService;import net.zdsoft.keel.util.Pagination;import net.zdsoft.keel.util.UUIDUtils;import net.zdsoft.keelcnet.action.UploadFile;import net.zdsoft.office.convertflow.constant.ConvertFlowConstants;import net.zdsoft.office.convertflow.entity.OfficeConvertFlow;import net.zdsoft.office.convertflow.service.OfficeConvertFlowService;import net.zdsoft.office.convertflow.service.OfficeConvertFlowTaskService;import net.zdsoft.office.convertflow.service.OfficeFlowSendMsgService;import net.zdsoft.office.msgcenter.entity.OfficeMsgSending;import net.zdsoft.office.msgcenter.service.OfficeMsgSendingService;import net.zdsoft.office.teacherLeave.dao.OfficeTeacherLeaveDao;import net.zdsoft.office.teacherLeave.dto.HisTask;import net.zdsoft.office.teacherLeave.entity.OfficeTeacherLeave;import net.zdsoft.office.teacherLeave.entity.OfficeTeacherLeaveUser;import net.zdsoft.office.teacherLeave.service.OfficeTeacherLeaveService;import net.zdsoft.office.teacherLeave.service.OfficeTeacherLeaveUserService;import net.zdsoft.office.util.Constants;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;/** * office_teacher_leave  * @author  *  */public class OfficeTeacherLeaveServiceImpl implements OfficeTeacherLeaveService{		private DeptService deptService;	private UserService userService;	private TeacherService teacherService;	private AttachmentService attachmentService;	private TaskHandlerService taskHandlerService;	private ProcessHandlerService processHandlerService;	private OfficeMsgSendingService officeMsgSendingService;	private OfficeTeacherLeaveUserService officeTeacherLeaveUserService;	private SystemIniService systemIniService;	private UnitService unitService;	private SmsClientService smsClientService;		private OfficeTeacherLeaveDao officeTeacherLeaveDao;	private OfficeConvertFlowService officeConvertFlowService;	private OfficeFlowSendMsgService officeFlowSendMsgService;	private OfficeConvertFlowTaskService officeConvertFlowTaskService;		public void setOfficeConvertFlowTaskService(			OfficeConvertFlowTaskService officeConvertFlowTaskService) {		this.officeConvertFlowTaskService = officeConvertFlowTaskService;	}	public void setOfficeFlowSendMsgService(			OfficeFlowSendMsgService officeFlowSendMsgService) {		this.officeFlowSendMsgService = officeFlowSendMsgService;	}		public void setOfficeConvertFlowService(			OfficeConvertFlowService officeConvertFlowService) {		this.officeConvertFlowService = officeConvertFlowService;	}		public void setAttachmentService(AttachmentService attachmentService) {		this.attachmentService = attachmentService;	}	public void setTeacherService(TeacherService teacherService) {		this.teacherService = teacherService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public void setTaskHandlerService(TaskHandlerService taskHandlerService) {		this.taskHandlerService = taskHandlerService;	}	public void setDeptService(DeptService deptService) {		this.deptService = deptService;	}		public void setOfficeMsgSendingService(			OfficeMsgSendingService officeMsgSendingService) {		this.officeMsgSendingService = officeMsgSendingService;	}	public void setOfficeTeacherLeaveUserService(			OfficeTeacherLeaveUserService officeTeacherLeaveUserService) {		this.officeTeacherLeaveUserService = officeTeacherLeaveUserService;	}	public void setSystemIniService(SystemIniService systemIniService) {		this.systemIniService = systemIniService;	}	public void setUnitService(UnitService unitService) {		this.unitService = unitService;	}	public void setSmsClientService(SmsClientService smsClientService) {		this.smsClientService = smsClientService;	}	@Override	public OfficeTeacherLeave save(OfficeTeacherLeave officeTeacherLeave){		return officeTeacherLeaveDao.save(officeTeacherLeave);	}		@Override	public Integer delete(String[] ids){		List<OfficeTeacherLeave> officeTeacherLeaves = officeTeacherLeaveDao.getOfficeTeacherLeaveByIds(ids);		for (OfficeTeacherLeave officeTeacherLeave : officeTeacherLeaves) {			if(officeTeacherLeave.getApplyStatus() > Constants.LEAVE_APPLY_SAVE){				processHandlerService.deleteProcessInstance(officeTeacherLeave.getFlowId(), true);			}		}		officeTeacherLeaveUserService.deleteByLeaveIds(ids);		List<Attachment> attachments = attachmentService				.getAttachments(ids[0],Constants.OFFICE_TEACHER_LEAVE_ATT);		String[] attachmentIds = new String[attachments.size()];		for(int i = 0; i < attachments.size(); i++){			attachmentIds[i] = attachments.get(i).getId();		}		attachmentService.deleteAttachments(attachmentIds);		return officeTeacherLeaveDao.delete(ids);	}		@Override	public Integer update(OfficeTeacherLeave officeTeacherLeave){		return officeTeacherLeaveDao.update(officeTeacherLeave);	}		@Override	public OfficeTeacherLeave getOfficeTeacherLeaveById(String id){		OfficeTeacherLeave officeTeacherLeaveById = officeTeacherLeaveDao.getOfficeTeacherLeaveById(id);		if(officeTeacherLeaveById!=null){			User user = userService.getUser(officeTeacherLeaveById.getApplyUserId());			Teacher teacher = teacherService.getTeacher(officeTeacherLeaveById.getReplacingTeacher());			if(user!=null){				officeTeacherLeaveById.setUserName(user.getRealname());			}			if(teacher!=null){				officeTeacherLeaveById.setReplacingTeacherName(teacher.getName());			}			if(StringUtils.isNotEmpty(officeTeacherLeaveById.getFlowId())){				officeTeacherLeaveById.setHisTaskList(getHisTisk(officeTeacherLeaveById.getFlowId()));			}			officeTeacherLeaveById.setAttachments(attachmentService.getAttachments(officeTeacherLeaveById.getId(), Constants.OFFICE_TEACHER_LEAVE_ATT));			//设置通知人员			List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = officeTeacherLeaveUserService.getOfficeTeacherLeaveUserList(id);			if(CollectionUtils.isNotEmpty(officeTeacherLeaveUsers)){				Map<String, User> userMap = userService.getUserMap(officeTeacherLeaveById.getUnitId());				StringBuffer sbf = new StringBuffer();				StringBuffer sbfNames = new StringBuffer();				int i = 0;				for(OfficeTeacherLeaveUser otlu:officeTeacherLeaveUsers){					if(userMap.containsKey(otlu.getUserId())){						if(i == 0){							sbf.append(otlu.getUserId());							sbfNames.append(userMap.get(otlu.getUserId()).getRealname());						}else{							sbf.append(",").append(otlu.getUserId());							sbfNames.append(",").append(userMap.get(otlu.getUserId()).getRealname());						}						i++;					}				}				officeTeacherLeaveById.setNoticePersonIds(sbf.toString());				officeTeacherLeaveById.setNoticePersonNames(sbfNames.toString());			}		}		return officeTeacherLeaveById;	}	private List<HisTask> getHisTisk(String flowId){		List<HisTask> hisTaskList = new ArrayList<HisTask>();		List<HistoricTask> histasks = taskHandlerService.getHistoricTasks(flowId);		if(CollectionUtils.isNotEmpty(histasks)){			for (HistoricTask hisTask : histasks) {				HisTask task = new HisTask();				task.setComment(hisTask.getComment());				task.setTaskName(hisTask.getTaskName());				task.setCandidateUsers(hisTask.getCandidateUsers());				Comment comment = task.getComment();				if(comment!=null){					if(AgileIdentityLinkType.PROXY.equals(comment.getAssigneeType())){						String assigneeName = comment.getAssigneeName()+" 代签(";						if(task.getCandidateUsers().size()>0){							List<User> userList = userService.getUsers(task.getCandidateUsers().toArray(new String[0]));								if(CollectionUtils.isNotEmpty(userList)){								for (int i=0;i<userList.size();i++) {									User user= userList.get(i);									if(user!=null){										assigneeName +=user.getRealname();									}									if((i+1)!=userList.size()){										assigneeName +=",";									}								}							}						}						assigneeName +=")";						task.setAssigneeName(assigneeName);					}else{						task.setAssigneeName(comment.getAssigneeName());					}				}				hisTaskList.add(task);			}		}		return hisTaskList;	}	@Override	public Map<String, OfficeTeacherLeave> getOfficeTeacherLeaveMapByIds(String[] ids){		return officeTeacherLeaveDao.getOfficeTeacherLeaveMapByIds(ids);	}		@Override	public List<OfficeTeacherLeave> getOfficeTeacherLeaveList(){		return officeTeacherLeaveDao.getOfficeTeacherLeaveList();	}		@Override	public List<OfficeTeacherLeave> getOfficeTeacherLeavePage(Pagination page){		return officeTeacherLeaveDao.getOfficeTeacherLeavePage(page);	}	

	@Override
	public List<OfficeTeacherLeave> getOfficeTeacherLeaveByUnitIdList(String unitId){
		return officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdList(unitId);
	}

	@Override
	public List<OfficeTeacherLeave> getOfficeTeacherLeaveByUnitIdPage(String unitId, Pagination page){
		return officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdPage(unitId, page);
	}		public void setOfficeTeacherLeaveDao(OfficeTeacherLeaveDao officeTeacherLeaveDao){		this.officeTeacherLeaveDao = officeTeacherLeaveDao;	}	@Override	public List<OfficeTeacherLeave> getApplyList(String userId, String unitId,			int applyStatus, Pagination page) {		return officeTeacherLeaveDao.getApplyList(userId,unitId,applyStatus,page);	}	@Override	public List<OfficeTeacherLeave> getQueryList(String unitId,			String userId, String userName, String deptId,			Date startTime, Date endTime, Pagination page) {		List<OfficeTeacherLeave> queryList = officeTeacherLeaveDao.getQueryList(unitId,userId,userName,deptId,startTime,endTime, page);		Set<String>deptIds=new HashSet<String>();		for (OfficeTeacherLeave item : queryList) {			deptIds.add(item.getDeptId());		}		Map<String, Dept> deptMap = deptService.getDeptMap(deptIds.toArray(new String[0]));		for (OfficeTeacherLeave item : queryList) {			Dept dept = deptMap.get(item.getDeptId());			if(dept!=null){				item.setDeptName(dept.getDeptname());			}else {				item.setDeptName("部门已删除");			}		}		return queryList;	}	@Override	public void update(OfficeTeacherLeave officeTeacherLeave, UploadFile uploadFile) {		saveUsers(officeTeacherLeave);		officeTeacherLeaveDao.update(officeTeacherLeave);		if(uploadFile!=null){			List<Attachment> attachments = attachmentService.getAttachments(officeTeacherLeave.getId(), Constants.OFFICE_TEACHER_LEAVE_ATT);			if(CollectionUtils.isNotEmpty(attachments)){				Attachment attachment = attachments.get(0);				attachment.setFileName(uploadFile.getFileName());				attachment.setContentType(uploadFile.getContentType());				attachment.setFileSize(uploadFile.getFileSize());				attachmentService.updateAttachment(attachment, uploadFile, true);			}else{				Attachment attachment = new Attachment();				attachment.setFileName(uploadFile.getFileName());				attachment.setContentType(uploadFile.getContentType());				attachment.setFileSize(uploadFile.getFileSize());				attachment.setUnitId(officeTeacherLeave.getUnitId());				attachment.setObjectId(officeTeacherLeave.getId());				attachment.setObjectType(Constants.OFFICE_TEACHER_LEAVE_ATT);				attachmentService.saveAttachment(attachment, uploadFile);			}		}			}	@Override //TODO	public void add(OfficeTeacherLeave officeTeacherLeave, UploadFile uploadFile) {		saveUsers(officeTeacherLeave);		officeTeacherLeaveDao.save(officeTeacherLeave);		if(uploadFile!=null){			Attachment attachment = new Attachment();			attachment.setFileName(uploadFile.getFileName());			attachment.setContentType(uploadFile.getContentType());			attachment.setFileSize(uploadFile.getFileSize());			attachment.setUnitId(officeTeacherLeave.getUnitId());			attachment.setObjectId(officeTeacherLeave.getId());			attachment.setObjectType(Constants.OFFICE_TEACHER_LEAVE_ATT);			attachmentService.saveAttachment(attachment, uploadFile);		}	}		public void saveUsers(OfficeTeacherLeave officeTeacherLeave){		if(StringUtils.isBlank(officeTeacherLeave.getId())){			officeTeacherLeave.setId(UUIDUtils.newId());		}else{			officeTeacherLeaveUserService.deleteByLeaveId(officeTeacherLeave.getId());		}		if(StringUtils.isNotBlank(officeTeacherLeave.getNoticePersonIds())){			String[] userIds = officeTeacherLeave.getNoticePersonIds().split(",");			List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = new ArrayList<OfficeTeacherLeaveUser>();			for(String userId:userIds){				OfficeTeacherLeaveUser officeTeacherLeaveUser = new OfficeTeacherLeaveUser();				officeTeacherLeaveUser.setLeaveId(officeTeacherLeave.getId());				officeTeacherLeaveUser.setUserId(userId);				officeTeacherLeaveUsers.add(officeTeacherLeaveUser);			}			officeTeacherLeaveUserService.batchSave(officeTeacherLeaveUsers);		}	}	@Override	public void startFlow(OfficeTeacherLeave officeTeacherLeave, String userId, UploadFile file) {		officeTeacherLeave.setApplyStatus(Constants.LEAVE_APPLY_FLOWING);		if(StringUtils.isNotEmpty(officeTeacherLeave.getId())){			update(officeTeacherLeave,file);		}else{			officeTeacherLeave.setId(UUIDUtils.newId());			add(officeTeacherLeave,file);		}		Map<String, Object> variables = new HashMap<String, Object>();		variables.put("days", officeTeacherLeave.getDays());		variables.put("pass",true);		String flowId = processHandlerService.startProcessInstance(FlowConstant.OFFICE_SUBSYSTEM,officeTeacherLeave.getFlowId(), Integer.parseInt(FlowConstant.OFFICE_SUBSYSTEM+FlowConstant.OFFICE_LEAVE), officeTeacherLeave.getId(), userId, variables);		officeTeacherLeave.setFlowId(flowId);		update(officeTeacherLeave);				officeConvertFlowService.startFlow(officeTeacherLeave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE);		officeFlowSendMsgService.startFlowSendMsg(officeTeacherLeave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE);				//如果需要发短信		TODO		if("1".equals(systemIniService.getValue("TEACHER.LEAVE.SMS"))){			String applyUserName = userService.getUser(officeTeacherLeave.getApplyUserId()).getRealname();			List<TaskDescription> tdlist = taskHandlerService.getTodoTasks(flowId);						if(CollectionUtils.isNotEmpty(tdlist)){				Unit unit = unitService.getUnit(officeTeacherLeave.getUnitId());				MsgDto msgDto = new MsgDto();				msgDto.setUserId(officeTeacherLeave.getApplyUserId());				msgDto.setUnitName(unit.getName());				msgDto.setUserName(applyUserName);				msgDto.setContent("您有一个请假申请需要审核！【"+applyUserName+"-"+ unit.getName() +"】【智慧教育应用】");				msgDto.setTiming(false);								//获取下步审核人员				Set<String> userIds = new HashSet<String>();				Set<String> teacherIds = new HashSet<String>();				for(TaskDescription task : tdlist){					userIds.addAll(task.getCandidateUsers());				}				Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));				for(User user : userMap.values()){					teacherIds.add(user.getTeacherid());				}				Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));								List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();				for(User user : userMap.values()){					Teacher tea = teacherMap.get(user.getTeacherid());					if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){						SendDetailDto sendDetailDto = new SendDetailDto();						sendDetailDto.setReceiverId(user.getId());						sendDetailDto.setReceiverName(user.getRealname());						sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信						sendDetailDto.setMobile(tea.getPersonTel());						sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户						sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id						sendDetailDtos.add(sendDetailDto);					}				}				SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);				smsThread.start();			}		}	}		/**	 * 发送短信	 * @author Administrator	 *	 */	private class SmsThread extends Thread{   	private MsgDto msgDto;   	private List<SendDetailDto> sendDetailDtoList;   	public SmsThread(MsgDto msgDto, List<SendDetailDto> sendDetailDtoList){   		this.msgDto = msgDto;   		this.sendDetailDtoList = sendDetailDtoList;   	}		@Override		public void run() {			smsClientService.saveSmsBatch(msgDto, sendDetailDtoList);		}   }		public void setProcessHandlerService(			ProcessHandlerService processHandlerService) {		this.processHandlerService = processHandlerService;	}	@Override	public List<OfficeTeacherLeave> toDoAudit(String userId, Pagination page) {		List<OfficeTeacherLeave> leaveList = new ArrayList<OfficeTeacherLeave>();		List<TaskDescription> todoTaskList = new ArrayList<TaskDescription>();		todoTaskList = taskHandlerService.getTodoTasks(userId, Integer.parseInt(FlowConstant.OFFICE_SUBSYSTEM+FlowConstant.OFFICE_LEAVE), page);//		processInstanceId		if(CollectionUtils.isNotEmpty(todoTaskList)){			Set<String> flowIdSet= new HashSet<String>();			for (TaskDescription task : todoTaskList) {				flowIdSet.add(task.getProcessInstanceId());				}			Map<String,OfficeTeacherLeave> leaveMap = officeTeacherLeaveDao.getOfficeTeacherLeaveMapByFlowIds(flowIdSet.toArray(new String[0]));			Set<String> userIdSet = new HashSet<String>();			for (String leaveId : leaveMap.keySet()) {				OfficeTeacherLeave officeTeacherLeave = leaveMap.get(leaveId);				if(officeTeacherLeave!=null){					userIdSet.add(officeTeacherLeave.getApplyUserId());				}			}			Map<String,User> userMap = new HashMap<String, User>();			userMap = userService.getUserWithDelMap(userIdSet.toArray(new String[0]));			for (TaskDescription task : todoTaskList) {				OfficeTeacherLeave officeTeacherLeave = leaveMap.get(task.getProcessInstanceId());				if(officeTeacherLeave != null){					officeTeacherLeave.setTaskId(task.getTaskId());					officeTeacherLeave.setTaskName(task.getTaskName());					User user = userMap.get(officeTeacherLeave.getApplyUserId());					if(user!=null){						officeTeacherLeave.setUserName(user.getRealname());					}else{						officeTeacherLeave.setUserName("用户已删除");					}					leaveList.add(officeTeacherLeave);				}			}		}		return leaveList;	}	@Override	public List<OfficeTeacherLeave> HaveDoAudit(String userId,boolean invalid, Pagination page) {		List<OfficeTeacherLeave>  leaveList = officeTeacherLeaveDao.HaveDoAudit(userId,invalid,page);		Set<String> userIdSet = new HashSet<String>();		for (OfficeTeacherLeave officeTeacherLeave : leaveList) {			userIdSet.add(officeTeacherLeave.getApplyUserId());			if(invalid){				userIdSet.add(officeTeacherLeave.getInvalidUser());			}		}		Map<String,User> userMap = new HashMap<String, User>();		userMap = userService.getUserWithDelMap(userIdSet.toArray(new String[0]));		for (OfficeTeacherLeave officeTeacherLeave : leaveList) {			User user = userMap.get(officeTeacherLeave.getApplyUserId());			if(user!=null){				officeTeacherLeave.setUserName(user.getRealname());			}else{				officeTeacherLeave.setUserName("用户已删除");			}			if(StringUtils.isNotBlank(officeTeacherLeave.getInvalidUser())){				User user2 = userMap.get(officeTeacherLeave.getInvalidUser());				if(user2!=null){					officeTeacherLeave.setInvalidUserName(user2.getRealname());				}else{					officeTeacherLeave.setInvalidUserName("用户已删除");				}			}		}		return leaveList;	}	@Override	public void passFlow(boolean pass, TaskHandlerSave taskHandlerSave,			String leaveId) {		String auditUserId = taskHandlerSave.getCurrentUserId();		OfficeTeacherLeave leave = officeTeacherLeaveDao.getOfficeTeacherLeaveById(leaveId);		Map<String, Object> variables = new HashMap<String, Object>();		variables.put("pass", pass);		variables.put("days", leave.getDays());		taskHandlerSave.setVariables(variables);		if(pass){			taskHandlerSave.getComment().setTextComment("[审核通过]"+taskHandlerSave.getComment().getTextComment());			//TODO 发送消息提醒			sendNote(leave);		}else{			taskHandlerSave.getComment().setTextComment("[审核不通过]"+taskHandlerSave.getComment().getTextComment());		}		TaskHandlerResult result = taskHandlerService.completeTask(taskHandlerSave);		if(result.getStatus()==TaskHandlerResult.STATUS_FINISH){			if(result.getResult()==TaskHandlerResult.RESULT_PASS){				leave.setApplyStatus(Constants.LEAVE_APPLY_FLOW_FINSH_PASS);			}else if(result.getResult()==TaskHandlerResult.RESULT_NOT_PASS){				leave.setApplyStatus(Constants.LEAVE_APPLY_FLOW_FINSH_NOT_PASS);			}			update(leave);		}				officeConvertFlowService.completeTask(leaveId, taskHandlerSave.getCurrentUserId(), taskHandlerSave.getCurrentTask().getTaskId(), result, pass);		officeFlowSendMsgService.completeTaskSendMsg(taskHandlerSave.getCurrentUserId(), pass, leave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE, result);				//短信通知	TODO		if(pass && "1".equals(systemIniService.getValue("TEACHER.LEAVE.SMS"))){			Unit unit = unitService.getUnit(leave.getUnitId());			User applyUser = userService.getUser(leave.getApplyUserId());			User auditUser = userService.getUser(auditUserId);			String auditUserName = "";			if(auditUser != null){				auditUserName = auditUser.getRealname();			}						if(result.getStatus()==TaskHandlerResult.STATUS_FINISH){//结束流程通知申请人员、通知人员，否则通知下步审核人员				List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = officeTeacherLeaveUserService.getOfficeTeacherLeaveUserList(leave.getId());				if(CollectionUtils.isNotEmpty(officeTeacherLeaveUsers)){					MsgDto msgDto = new MsgDto();					msgDto.setUserId(auditUserId);					msgDto.setUnitName(unit.getName());					msgDto.setUserName(auditUserName);										SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");					String content = applyUser.getRealname()+"因"+leave.getLeaveReason()							+"，于"+sdf.format(leave.getLeaveBeignTime())							+"到"+sdf.format(leave.getLeaveEndTime())							+"期间,请假"+leave.getDays()+"天，请知晓";					msgDto.setContent(content);					msgDto.setTiming(false);										//获取通知人员					Set<String> userIds = new HashSet<String>();					Set<String> teacherIds = new HashSet<String>();					for(OfficeTeacherLeaveUser leaveuser : officeTeacherLeaveUsers){						userIds.add(leaveuser.getUserId());					}					Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));					for(User user : userMap.values()){						teacherIds.add(user.getTeacherid());					}					Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));										List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();					for(User user : userMap.values()){						Teacher tea = teacherMap.get(user.getTeacherid());						if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){							SendDetailDto sendDetailDto = new SendDetailDto();							sendDetailDto.setReceiverId(user.getId());							sendDetailDto.setReceiverName(user.getRealname());							sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信							sendDetailDto.setMobile(tea.getPersonTel());							sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户							sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id							sendDetailDtos.add(sendDetailDto);						}					}					SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);					smsThread.start();				}								//发送给申请人				MsgDto msgDto = new MsgDto();				msgDto.setUserId(auditUserId);				msgDto.setUnitName(unit.getName());				msgDto.setUserName(auditUserName);				msgDto.setContent("您有一个请假申请已审核通过！【"+auditUserName+"-"+ unit.getName() +"】【智慧教育应用】");				msgDto.setTiming(false);								Teacher applyTea = teacherService.getTeacher(applyUser.getTeacherid());								List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();				SendDetailDto sendDetailDto = new SendDetailDto();				sendDetailDto.setReceiverId(leave.getApplyUserId());				sendDetailDto.setReceiverName(applyUser.getRealname());				sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信				sendDetailDto.setMobile(applyTea.getPersonTel());				sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户				sendDetailDto.setUnitId(applyUser.getUnitid());// 短信接收用户单位id				sendDetailDtos.add(sendDetailDto);								SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);				smsThread.start();			}			else{				List<TaskDescription> tdlist = taskHandlerService.getTodoTasks(leave.getFlowId());				if(CollectionUtils.isNotEmpty(tdlist)){					MsgDto msgDto = new MsgDto();					msgDto.setUserId(auditUserId);					msgDto.setUnitName(unit.getName());					msgDto.setUserName(auditUserName);					msgDto.setContent("您有一个请假申请需要审核！【"+auditUserName+"-"+ unit.getName() +"】【智慧教育应用】");					msgDto.setTiming(false);										//获取下步审核人员					Set<String> userIds = new HashSet<String>();					Set<String> teacherIds = new HashSet<String>();					for(TaskDescription task : tdlist){						userIds.addAll(task.getCandidateUsers());					}					Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));					for(User user : userMap.values()){						teacherIds.add(user.getTeacherid());					}					Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));										List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();					for(User user : userMap.values()){						Teacher tea = teacherMap.get(user.getTeacherid());						if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){							SendDetailDto sendDetailDto = new SendDetailDto();							sendDetailDto.setReceiverId(user.getId());							sendDetailDto.setReceiverName(user.getRealname());							sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信							sendDetailDto.setMobile(tea.getPersonTel());							sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户							sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id							sendDetailDtos.add(sendDetailDto);						}					}					SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);					smsThread.start();				}			}		}	}		public void sendNote(OfficeTeacherLeave officeTeacherLeave){		List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = officeTeacherLeaveUserService.getOfficeTeacherLeaveUserList(officeTeacherLeave.getId());		if(CollectionUtils.isNotEmpty(officeTeacherLeaveUsers)){			StringBuffer sbf = new StringBuffer();			int i = 0;			for(OfficeTeacherLeaveUser otlu:officeTeacherLeaveUsers){				if(i == 0){					sbf.append(otlu.getUserId());				}else{					sbf.append(",").append(otlu.getUserId());				}				i++;			}			User user = userService.getUser(officeTeacherLeave.getCreateUserId());			User user1 = userService.getUser(officeTeacherLeave.getApplyUserId());			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");			//TODO---------------------组织消息内容------------------------			OfficeMsgSending officeMsgSending = new OfficeMsgSending();			officeMsgSending.setCreateUserId(officeTeacherLeave.getCreateUserId());			officeMsgSending.setTitle("教师请假审核通过信息提醒");			String content = user1.getRealname()+"因"+officeTeacherLeave.getLeaveReason()					+"，于"+sdf.format(officeTeacherLeave.getLeaveBeignTime())					+"到"+sdf.format(officeTeacherLeave.getLeaveEndTime())					+"期间,请假"+officeTeacherLeave.getDays()+"天，请安排相关事宜";			officeMsgSending.setContent(content);			officeMsgSending.setSimpleContent(content);			officeMsgSending.setUserIds(sbf.toString());			officeMsgSending.setUnitId(officeTeacherLeave.getUnitId());			officeMsgSending.setSendUserName(user.getRealname());			officeMsgSending.setState(Constants.MSG_STATE_SEND);			officeMsgSending.setIsNeedsms(false);			officeMsgSending.setMsgType(BaseConstant.MSG_TYPE_ATTENDANCE);			officeMsgSendingService.save(officeMsgSending, null, null);			//TODO-------------------组织短信内容并发送----------------------		}	}		@Override	public Map<String, String> getSumMap(String unitId, Date startTime, Date endTime, String deptId) {		return officeTeacherLeaveDao.getSumMap(unitId, startTime, endTime, deptId);	}		@Override	public String[] getApplyUserIds(String unitId, Date startTime,			Date endTime, String deptId) {		return officeTeacherLeaveDao.getApplyUserIds(unitId, startTime, endTime, deptId);	}	@Override	public void deleteRevoke(String id) {		//1.删除convertFlow关联表信息		OfficeConvertFlow officeConvertFlow = officeConvertFlowService.getObjByBusinessId(id);		if(officeConvertFlow!=null&&StringUtils.isNotBlank(officeConvertFlow.getId())){			officeConvertFlowTaskService.deleteByConvertFlowId(officeConvertFlow.getId());		}		officeConvertFlowService.deleteByBusinessId(id);		//2.删除对应流程表信息，本次撤销功能不发信息		//3.删除申请表		delete(new String[]{id} );	}	@Override	public void deleteInvalid(String id,String userId) {		OfficeTeacherLeave officeTeacherLeave = getOfficeTeacherLeaveById(id);		if(officeTeacherLeave!=null){			officeTeacherLeave.setApplyStatus(Constants.APPLY_STATE_INVALID);			officeTeacherLeave.setInvalidUser(userId);			update(officeTeacherLeave);		}		officeConvertFlowService.update(Constants.APPLY_STATE_INVALID, id);	}	}