package net.zdsoft.office.dailyoffice.service.impl;import java.util.Date;import java.util.List;import net.zdsoft.eis.base.common.service.SystemIniService;import net.zdsoft.keel.util.DateUtils;import net.zdsoft.keel.util.Pagination;import net.zdsoft.office.dailyoffice.dao.OfficeAttendanceDoorRecordDao;import net.zdsoft.office.dailyoffice.entity.OfficeAttendanceDoorRecord;import net.zdsoft.office.dailyoffice.service.OfficeAttendanceDoorRecordService;import net.zdsoft.office.dailyoffice.sync.constant.OfficeSyncKqConstant;import net.zdsoft.office.dailyoffice.sync.dao.DoorRecordDao;import net.zdsoft.office.dailyoffice.sync.entity.DoorRecord;import org.apache.commons.lang3.StringUtils;/** * office_attendance_door_record  * @author  *  */public class OfficeAttendanceDoorRecordServiceImpl implements OfficeAttendanceDoorRecordService{	private OfficeAttendanceDoorRecordDao officeAttendanceDoorRecordDao;	private SystemIniService systemIniService;	private DoorRecordDao doorRecordDao;		/**	 * 新增office_attendance_door_record	 * @param officeAttendanceDoorRecord	 * @return	 */	@Override	public OfficeAttendanceDoorRecord save(OfficeAttendanceDoorRecord officeAttendanceDoorRecord){		return officeAttendanceDoorRecordDao.save(officeAttendanceDoorRecord);	}		/**	 * 根据ids数组删除office_attendance_door_record数据	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeAttendanceDoorRecordDao.delete(ids);	}		/**	 * 更新office_attendance_door_record	 * @param officeAttendanceDoorRecord	 * @return	 */	@Override	public Integer update(OfficeAttendanceDoorRecord officeAttendanceDoorRecord){		return officeAttendanceDoorRecordDao.update(officeAttendanceDoorRecord);	}		/**	 * 根据id获取office_attendance_door_record	 * @param id	 * @return	 */	@Override	public OfficeAttendanceDoorRecord getOfficeAttendanceDoorRecordById(String id){		return officeAttendanceDoorRecordDao.getOfficeAttendanceDoorRecordById(id);	}		@Override	public List<OfficeAttendanceDoorRecord> getOfficeAttendanceDoorRecordByControllerID(			String controllerID,Date queryBeginDate,Date queryEndTime,Pagination page) {		return officeAttendanceDoorRecordDao.getOfficeAttendanceDoorRecordByControllerID(controllerID,DateUtils.date2String(queryBeginDate,"yyyyMMdd"),				DateUtils.date2String(queryEndTime,"yyyyMMdd"),page);	}		@Override	public void syncDoorRecord() {		String lastUpdateTime = getLastUpdateTime();		String StartDataDate = lastUpdateTime.split("-")[0];		String StartDataTime = lastUpdateTime.split("-")[1];		String[] endDateTimeArray = DateUtils.currentDate2String().split(" ");		String EndDataDate = endDateTimeArray[0].split("-")[0]+endDateTimeArray[0].split("-")[1]+endDateTimeArray[0].split("-")[2];		String[] timeArray = endDateTimeArray[1].split("\\.");		String EndDataTime = timeArray[0].split(":")[0] + timeArray[0].split(":")[1] + timeArray[0].split(":")[2];		List<DoorRecord> list = doorRecordDao.getList(StartDataDate, EndDataDate, StartDataTime, EndDataTime);		int maxSyncVersion = officeAttendanceDoorRecordDao.getMaxSyncVersion();		for(DoorRecord doorRecord : list) {			OfficeAttendanceDoorRecord entity = new OfficeAttendanceDoorRecord();			entity.setTeacherCode(doorRecord.getStaffID());			entity.setDataDate(doorRecord.getDataDate());			entity.setDataTime(doorRecord.getDataTime());			entity.setControllerId(doorRecord.getControllerID());			entity.setReaderId(doorRecord.getReaderID());			entity.setDataDoorNo(doorRecord.getDataDoorNo());			entity.setSyncDatetime(new Date());			entity.setSyncVersion(maxSyncVersion + 1);			officeAttendanceDoorRecordDao.save(entity);		}		updateLastUpdateTime(EndDataDate + "-" + EndDataTime);	}		public void updateLastUpdateTime(String lastUpdateTime) {		if(StringUtils.isNotBlank(lastUpdateTime)) {			systemIniService.updateNowValue(OfficeSyncKqConstant.OFFICE_KQ_DOOR_SYNC_LAST_TIME, lastUpdateTime);		}	}		public String getLastUpdateTime() {		String dateString = systemIniService.getValue(OfficeSyncKqConstant.OFFICE_KQ_DOOR_SYNC_LAST_TIME);		if(StringUtils.isNotBlank(dateString)) {			return dateString;		}else {			throw new RuntimeException("获取机房考勤数据：无法获取机房开门数据同步最近一次的时间");		}	}		public void setOfficeAttendanceDoorRecordDao(OfficeAttendanceDoorRecordDao officeAttendanceDoorRecordDao){		this.officeAttendanceDoorRecordDao = officeAttendanceDoorRecordDao;	}	public void setSystemIniService(SystemIniService systemIniService) {		this.systemIniService = systemIniService;	}	public void setDoorRecordDao(DoorRecordDao doorRecordDao) {		this.doorRecordDao = doorRecordDao;	}}