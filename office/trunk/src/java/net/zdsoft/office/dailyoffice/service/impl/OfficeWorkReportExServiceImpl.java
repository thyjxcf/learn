package net.zdsoft.office.dailyoffice.service.impl;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import net.zdsoft.eis.base.common.entity.Module;import net.zdsoft.eis.base.common.entity.Unit;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.ModuleService;import net.zdsoft.eis.base.common.service.UnitService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.eis.base.common.service.UserSetService;import net.zdsoft.eis.base.constant.WeikeAppConstant;import net.zdsoft.eis.component.push.client.WeikePushClient;import net.zdsoft.eis.component.push.entity.WKPushParm;import net.zdsoft.eis.frame.util.RedisUtils;import net.zdsoft.keel.util.Pagination;import net.zdsoft.office.dailyoffice.dao.OfficeWorkReportExDao;import net.zdsoft.office.dailyoffice.entity.OfficeWorkReport;import net.zdsoft.office.dailyoffice.entity.OfficeWorkReportEx;import net.zdsoft.office.dailyoffice.service.OfficeWorkReportExService;import net.zdsoft.office.dailyoffice.service.OfficeWorkReportService;import net.zdsoft.office.enums.WeikeAppUrlEnum;import org.apache.commons.lang.StringUtils;/** * office_work_report_ex  * @author  *  */public class OfficeWorkReportExServiceImpl implements OfficeWorkReportExService{	private OfficeWorkReportExDao officeWorkReportExDao;	private OfficeWorkReportService officeWorkReportService;	private UserService userService;	private UserSetService userSetService;	private ModuleService moduleService;	private UnitService unitService;		public void setUserSetService(UserSetService userSetService) {		this.userSetService = userSetService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	@Override	public OfficeWorkReportEx save(OfficeWorkReportEx officeWorkReportEx){		officeWorkReportEx=officeWorkReportExDao.save(officeWorkReportEx);				OfficeWorkReport report=officeWorkReportService.getOfficeWorkReportById(officeWorkReportEx.getReportId());		String userId=officeWorkReportEx.getUserId();		Set<String> userIds=new HashSet<String>();		if(report!=null){			String[]  receviceUserIds=report.getReceiveUserId().split(",");			for(String receiceUserId:receviceUserIds){				if(!userId.equals(receiceUserId)){					userIds.add(receiceUserId.trim());				}			}			if(!userId.equals(report.getCreateUserId())){				userIds.add(report.getCreateUserId());			}		}		User user=userService.getUser(officeWorkReportEx.getUserId());		//推送消息到微课		WKPushParm parm = new WKPushParm();		parm.setMsgTitle("工作汇报回复");		parm.setHeadContent(user.getRealname());		parm.setBodyTitle("工作汇报回复");		List<String> rows = new ArrayList<String>();		rows.add(officeWorkReportEx.getContent());				parm.setRowsContent(rows.toArray(new String[0]));		parm.setFootContent("详情");		String domain = RedisUtils.get("EIS.BASE.PATH.V6");		if(StringUtils.isNotBlank(domain)){			parm.setJumpType(WeikeAppConstant.JUMP_TYPE_0);			String url = WeikeAppUrlEnum.getWeikeUrl(WeikeAppConstant.WORK_REPORT, WeikeAppConstant.DETAILE_URL) + "&id="+report.getId();			if(userIds.contains(report.getCreateUserId())){//包含发件人(单独发送)  则发件人在我发起的中查询，其他人在我收到的查询				userIds.remove(report.getCreateUserId());				String sendUsrUrl = url + "&dataType=2";//dataType:2 我发起的				parm.setUrl(domain + sendUsrUrl);				WeikePushClient.getInstance().pushMessage("", new String[]{report.getCreateUserId()}, parm);			}			//非发件人			url += "&dataType=1";//dataType:1 我收到的			parm.setUrl(domain + url);		}				WeikePushClient.getInstance().pushMessage("", userIds.toArray(new String[0]), parm);		return officeWorkReportEx;	}		@Override	public Integer delete(String[] ids){		return officeWorkReportExDao.delete(ids);	}		@Override	public void delete(String reportId) {		officeWorkReportExDao.delete(reportId);	}	@Override	public Integer update(OfficeWorkReportEx officeWorkReportEx){		return officeWorkReportExDao.update(officeWorkReportEx);	}		@Override	public OfficeWorkReportEx getOfficeWorkReportExById(String id){		return officeWorkReportExDao.getOfficeWorkReportExById(id);	}		@Override	public Map<String, OfficeWorkReportEx> getOfficeWorkReportExMapByIds(String[] ids){		return officeWorkReportExDao.getOfficeWorkReportExMapByIds(ids);	}		@Override	public List<OfficeWorkReportEx> getOfficeWorkReportExList(){		return officeWorkReportExDao.getOfficeWorkReportExList();	}		@Override	public List<OfficeWorkReportEx> getOfficeWorkReportExPage(Pagination page){		return officeWorkReportExDao.getOfficeWorkReportExPage(page);	}	

	@Override
	public List<OfficeWorkReportEx> getOfficeWorkReportExByUnitIdList(String unitId){
		return officeWorkReportExDao.getOfficeWorkReportExByUnitIdList(unitId);
	}

	@Override
	public List<OfficeWorkReportEx> getOfficeWorkReportExByUnitIdPage(String unitId, Pagination page){
		return officeWorkReportExDao.getOfficeWorkReportExByUnitIdPage(unitId, page);
	}		public void setOfficeWorkReportExDao(OfficeWorkReportExDao officeWorkReportExDao){		this.officeWorkReportExDao = officeWorkReportExDao;	}	@Override	public List<OfficeWorkReportEx> getOfficeWorkReportExByrepotIdList(			String reportId) {		List<OfficeWorkReportEx> workReportExs = officeWorkReportExDao.getOfficeWorkReportExByrepotIdList(reportId);		Set<String> userIds = new HashSet<String>();		for(OfficeWorkReportEx ex:workReportExs){			userIds.add(ex.getUserId());		}		Map<String, User> userMap = userService.getUserWithDelMap(userIds.toArray(new String[0]));		Map<String, String> userPhotoMap = userSetService.getUserPhotoMap(userIds.toArray(new String[0]));		for(OfficeWorkReportEx ex:workReportExs){			if(userMap.containsKey(ex.getUserId())){				User user = userMap.get(ex.getUserId());				String path = userPhotoMap.get(ex.getUserId());				if(StringUtils.isBlank(path)){					path="";				}				if(user != null){					ex.setUserName(user.getRealname()+"=="+path);				}			}		}				return workReportExs;	}	public void setOfficeWorkReportService(			OfficeWorkReportService officeWorkReportService) {		this.officeWorkReportService = officeWorkReportService;	}	}

