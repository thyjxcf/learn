package net.zdsoft.office.dailyoffice.service.impl;/** * office_outline_content  * @author  *  */import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import net.zdsoft.eis.base.common.entity.Dept;import net.zdsoft.eis.base.common.service.DeptService;import net.zdsoft.keel.util.Pagination;import net.zdsoft.office.dailyoffice.dao.OfficeWorkArrangeDetailDao;import net.zdsoft.office.dailyoffice.entity.OfficeWorkArrangeContent;import net.zdsoft.office.dailyoffice.entity.OfficeWorkArrangeDetail;import net.zdsoft.office.dailyoffice.entity.OfficeWorkArrangeOutline;import net.zdsoft.office.dailyoffice.service.OfficeWorkArrangeContentService;import net.zdsoft.office.dailyoffice.service.OfficeWorkArrangeDetailService;import net.zdsoft.office.dailyoffice.service.OfficeWorkArrangeOutlineService;/** * office_outline_content  * @author  *  *//** * office_work_outline_content  * @author  *  */public class OfficeWorkArrangeDetailServiceImpl implements OfficeWorkArrangeDetailService{		private DeptService deptService;	private OfficeWorkArrangeOutlineService officeWorkArrangeOutlineService;	private OfficeWorkArrangeContentService officeWorkArrangeContentService;		private OfficeWorkArrangeDetailDao officeWorkArrangeDetailDao;		/**	 * @param WorkOutlineContent	 * @return	 */	@Override	public void save(OfficeWorkArrangeDetail officeWorkArrangeDetail){		officeWorkArrangeContentService.batchSave(officeWorkArrangeDetail.getOfficeWorkArrangeContents());		officeWorkArrangeDetailDao.save(officeWorkArrangeDetail);	}		/**	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeWorkArrangeDetailDao.delete(ids);	}		@Override	public Integer delete(String outlineId, String deptId, String state) {		return officeWorkArrangeDetailDao.delete(outlineId, deptId, state);	}		/**	 * @param WorkOutlineContent	 * @return	 */	@Override	public void update(OfficeWorkArrangeDetail officeWorkArrangeDetail){		officeWorkArrangeContentService.deleteByDetailId(officeWorkArrangeDetail.getId());		officeWorkArrangeContentService.batchSave(officeWorkArrangeDetail.getOfficeWorkArrangeContents());		officeWorkArrangeDetailDao.update(officeWorkArrangeDetail);	}		@Override	public void updateStateByOutLineId(String outLineId, String state) {		officeWorkArrangeDetailDao.updateStateByOutLineId(outLineId, state);	}		@Override	public void updateRemark(String id, String remark) {		officeWorkArrangeDetailDao.updateRemark(id, remark);	}		/**	 * @param id	 * @return	 */	@Override	public OfficeWorkArrangeDetail getOfficeWorkArrangeDetailById(String id){		return officeWorkArrangeDetailDao.getOfficeWorkArrangeDetailById(id);	}		@Override	public boolean isExistDetailByOutlineId(String outlineId) {		return officeWorkArrangeDetailDao.isExistDetailByOutlineId(outlineId);	}		@Override	public Map<String, OfficeWorkArrangeDetail> getOfficeWorkArrangeDetailMap(			String[] outLineIds, String deptId) {		return officeWorkArrangeDetailDao.getOfficeWorkArrangeDetailMap(outLineIds,deptId);	}		@Override	public OfficeWorkArrangeDetail getOfficeWorkArrangeDetail(String outlineId,			String deptId) {		OfficeWorkArrangeDetail officeWorkArrangeDetail = officeWorkArrangeDetailDao.getOfficeWorkArrangeDetail(outlineId, deptId);		if(officeWorkArrangeDetail != null){			List<OfficeWorkArrangeContent> officeWorkArrangeContents = officeWorkArrangeContentService.getOfficeWorkArrangeContentListByDetailId(officeWorkArrangeDetail.getId(), officeWorkArrangeDetail.getUnitId());			officeWorkArrangeDetail.setOfficeWorkArrangeContents(officeWorkArrangeContents);		}		return officeWorkArrangeDetail;	}		@Override	public List<OfficeWorkArrangeDetail> getOfficeWorkArrangeDetailListByOutLineId(			String outlineId) {		OfficeWorkArrangeOutline officeWorkArrangeOutline = officeWorkArrangeOutlineService.getOfficeWorkArrangeOutlineById(outlineId);		List<OfficeWorkArrangeDetail> officeWorkArrangeDetails = officeWorkArrangeDetailDao.getOfficeWorkArrangeDetailListByOutLineId(outlineId, officeWorkArrangeOutline.getState());		final Map<String, Dept> deptMap = deptService.getDeptMap(officeWorkArrangeOutline.getUnitId());		for(OfficeWorkArrangeDetail officeWorkArrangeDetail:officeWorkArrangeDetails){			if(deptMap.containsKey(officeWorkArrangeDetail.getDeptId())){				officeWorkArrangeDetail.setDeptName(deptMap.get(officeWorkArrangeDetail.getDeptId()).getDeptname());			}else{				officeWorkArrangeDetail.setDeptName("部门已删除");			}		}		/*Iterator<OfficeWorkArrangeDetail> it = officeWorkArrangeDetails.iterator();  		while (it.hasNext()) {  			OfficeWorkArrangeDetail item = it.next();  			if (StringUtils.isBlank(item.getRemark()))  				it.remove();  		}*/		Collections.sort(officeWorkArrangeDetails, new Comparator<OfficeWorkArrangeDetail>() {			@Override			public int compare(OfficeWorkArrangeDetail o1, OfficeWorkArrangeDetail o2) {				String c1 = "";				String c2 = "";				if(deptMap.containsKey(o1.getDeptId())){					c1 = deptMap.get(o1.getDeptId()).getDeptCode();				}else{					c1 = "999999";				}				if(deptMap.containsKey(o2.getDeptId())){					c2 = deptMap.get(o2.getDeptId()).getDeptCode();				}else{					c2 = "999999";				}				return c1.compareTo(c2);			}		});		return officeWorkArrangeDetails;	}		@Override	public List<OfficeWorkArrangeDetail> getOfficeWorkArrangeDetailListByOutLineId(			String outlineId, String deptId) {		OfficeWorkArrangeOutline officeWorkArrangeOutline = officeWorkArrangeOutlineService.getOfficeWorkArrangeOutlineById(outlineId);		List<OfficeWorkArrangeDetail> officeWorkArrangeDetails = officeWorkArrangeDetailDao.getOfficeWorkArrangeDetailListByOutLineId(outlineId, deptId, officeWorkArrangeOutline.getState());		final Map<String, Dept> deptMap = deptService.getDeptMap(officeWorkArrangeOutline.getUnitId());		for(OfficeWorkArrangeDetail officeWorkArrangeDetail:officeWorkArrangeDetails){			if(deptMap.containsKey(officeWorkArrangeDetail.getDeptId())){				officeWorkArrangeDetail.setDeptName(deptMap.get(officeWorkArrangeDetail.getDeptId()).getDeptname());			}else{				officeWorkArrangeDetail.setDeptName("部门已删除");			}		}		/*Iterator<OfficeWorkArrangeDetail> it = officeWorkArrangeDetails.iterator();  		while (it.hasNext()) {  			OfficeWorkArrangeDetail item = it.next();  			if (StringUtils.isBlank(item.getRemark()))  				it.remove();  		}*/		Collections.sort(officeWorkArrangeDetails, new Comparator<OfficeWorkArrangeDetail>() {			@Override			public int compare(OfficeWorkArrangeDetail o1, OfficeWorkArrangeDetail o2) {				String c1 = "";				String c2 = "";				if(deptMap.containsKey(o1.getDeptId())){					c1 = deptMap.get(o1.getDeptId()).getDeptCode();				}else{					c1 = "999999";				}				if(deptMap.containsKey(o2.getDeptId())){					c2 = deptMap.get(o2.getDeptId()).getDeptCode();				}else{					c2 = "999999";				}				return c1.compareTo(c2);			}		});		return officeWorkArrangeDetails;	}		@Override	public List<OfficeWorkArrangeDetail> getOfficeWorkArrangeDetailList(			String unitId, String year, String workOutlineId, String deptId,			String state, Pagination page) {		List<OfficeWorkArrangeDetail> list = officeWorkArrangeDetailDao.getOfficeWorkArrangeDetailList(unitId, year, workOutlineId, deptId, state, page);	    return list;	}		@Override	public Map<String, String> getOutLineIdsMap(String[] outLineIds) {		return officeWorkArrangeDetailDao.getOutLineIdsMap(outLineIds);	}		public void setDeptService(DeptService deptService) {		this.deptService = deptService;	}	public void setOfficeWorkArrangeOutlineService(			OfficeWorkArrangeOutlineService officeWorkArrangeOutlineService) {		this.officeWorkArrangeOutlineService = officeWorkArrangeOutlineService;	}	public void setOfficeWorkArrangeContentService(			OfficeWorkArrangeContentService officeWorkArrangeContentService) {		this.officeWorkArrangeContentService = officeWorkArrangeContentService;	}	public void setOfficeWorkArrangeDetailDao(			OfficeWorkArrangeDetailDao officeWorkArrangeDetailDao) {		this.officeWorkArrangeDetailDao = officeWorkArrangeDetailDao;	}	}

