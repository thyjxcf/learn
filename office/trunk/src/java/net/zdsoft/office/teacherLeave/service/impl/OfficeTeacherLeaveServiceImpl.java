package net.zdsoft.office.teacherLeave.service.impl;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import net.sf.json.JSONObject;import net.zdsoft.eis.base.attachment.entity.Attachment;import net.zdsoft.eis.base.attachment.service.AttachmentService;import net.zdsoft.eis.base.common.entity.Dept;import net.zdsoft.eis.base.common.entity.Mcodedetail;import net.zdsoft.eis.base.common.entity.Teacher;import net.zdsoft.eis.base.common.entity.Unit;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.CustomRoleService;import net.zdsoft.eis.base.common.service.DeptService;import net.zdsoft.eis.base.common.service.McodeService;import net.zdsoft.eis.base.common.service.McodedetailService;import net.zdsoft.eis.base.common.service.SystemIniService;import net.zdsoft.eis.base.common.service.TeacherService;import net.zdsoft.eis.base.common.service.UnitService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.eis.base.constant.BaseConstant;import net.zdsoft.eis.component.flowManage.constant.FlowConstant;import net.zdsoft.eis.component.flowManage.entity.Flow;import net.zdsoft.eis.component.flowManage.service.FlowManageService;import net.zdsoft.eis.sms.constant.SmsConstant;import net.zdsoft.eis.sms.dto.MsgDto;import net.zdsoft.eis.sms.dto.SendDetailDto;import net.zdsoft.eis.sms.service.SmsClientService;import net.zdsoft.jbpm.core.entity.Comment;import net.zdsoft.jbpm.core.entity.HistoricTask;import net.zdsoft.jbpm.core.entity.TaskDescription;import net.zdsoft.jbpm.core.entity.TaskHandlerResult;import net.zdsoft.jbpm.core.entity.TaskHandlerSave;import net.zdsoft.jbpm.core.service.ProcessHandlerService;import net.zdsoft.jbpm.core.service.TaskHandlerService;import net.zdsoft.keel.util.Pagination;import net.zdsoft.keel.util.UUIDUtils;import net.zdsoft.keelcnet.action.UploadFile;import net.zdsoft.leadin.common.entity.BusinessTask;import net.zdsoft.office.convertflow.constant.ConvertFlowConstants;import net.zdsoft.office.convertflow.entity.OfficeConvertFlow;import net.zdsoft.office.convertflow.service.OfficeConvertFlowService;import net.zdsoft.office.convertflow.service.OfficeConvertFlowTaskService;import net.zdsoft.office.convertflow.service.OfficeFlowSendMsgService;import net.zdsoft.office.dailyoffice.entity.OfficeBusinessTrip;import net.zdsoft.office.dailyoffice.entity.OfficeGoOut;import net.zdsoft.office.dailyoffice.entity.OfficeLog;import net.zdsoft.office.dailyoffice.service.OfficeBusinessTripService;import net.zdsoft.office.dailyoffice.service.OfficeGoOutService;import net.zdsoft.office.dailyoffice.service.OfficeLogService;import net.zdsoft.office.jtgoout.entity.OfficeJtGoout;import net.zdsoft.office.jtgoout.service.OfficeJtGooutService;import net.zdsoft.office.msgcenter.entity.OfficeMsgSending;import net.zdsoft.office.msgcenter.service.OfficeMsgSendingService;import net.zdsoft.office.officeFlow.dto.HisTask;import net.zdsoft.office.officeFlow.service.OfficeFlowService;import net.zdsoft.office.officeFlow.service.OfficeFlowStepInfoService;import net.zdsoft.office.teacherLeave.dao.OfficeTeacherLeaveDao;import net.zdsoft.office.teacherLeave.entity.OfficeTeacherLeave;import net.zdsoft.office.teacherLeave.entity.OfficeTeacherLeaveUser;import net.zdsoft.office.teacherLeave.service.OfficeTeacherLeaveService;import net.zdsoft.office.teacherLeave.service.OfficeTeacherLeaveUserService;import net.zdsoft.office.util.Constants;import org.apache.commons.beanutils.BeanUtils;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang.ArrayUtils;import org.apache.commons.lang.StringUtils;import com.alibaba.dubbo.common.json.JSON;/** * office_teacher_leave  * @author  *  */public class OfficeTeacherLeaveServiceImpl implements OfficeTeacherLeaveService{		private DeptService deptService;	private UserService userService;	private TeacherService teacherService;	private AttachmentService attachmentService;	private TaskHandlerService taskHandlerService;	private ProcessHandlerService processHandlerService;	private OfficeMsgSendingService officeMsgSendingService;	private OfficeTeacherLeaveUserService officeTeacherLeaveUserService;	private SystemIniService systemIniService;	private UnitService unitService;	private SmsClientService smsClientService;	private OfficeLogService officeLogService;		private OfficeTeacherLeaveDao officeTeacherLeaveDao;	private OfficeConvertFlowService officeConvertFlowService;	private OfficeFlowSendMsgService officeFlowSendMsgService;	private OfficeConvertFlowTaskService officeConvertFlowTaskService;	private FlowManageService flowManageService;	private CustomRoleService customRoleService;	private OfficeFlowService officeFlowService;	private OfficeFlowStepInfoService officeFlowStepInfoService;	private OfficeGoOutService officeGoOutService;	private McodedetailService mcodedetailService;	private OfficeBusinessTripService officeBusinessTripService;	private OfficeJtGooutService officeJtGooutService;		public void setOfficeConvertFlowTaskService(			OfficeConvertFlowTaskService officeConvertFlowTaskService) {		this.officeConvertFlowTaskService = officeConvertFlowTaskService;	}	public void setOfficeFlowSendMsgService(			OfficeFlowSendMsgService officeFlowSendMsgService) {		this.officeFlowSendMsgService = officeFlowSendMsgService;	}		public void setOfficeConvertFlowService(			OfficeConvertFlowService officeConvertFlowService) {		this.officeConvertFlowService = officeConvertFlowService;	}		public void setAttachmentService(AttachmentService attachmentService) {		this.attachmentService = attachmentService;	}	public void setTeacherService(TeacherService teacherService) {		this.teacherService = teacherService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public void setTaskHandlerService(TaskHandlerService taskHandlerService) {		this.taskHandlerService = taskHandlerService;	}	public void setDeptService(DeptService deptService) {		this.deptService = deptService;	}		public void setOfficeMsgSendingService(			OfficeMsgSendingService officeMsgSendingService) {		this.officeMsgSendingService = officeMsgSendingService;	}	public void setOfficeTeacherLeaveUserService(			OfficeTeacherLeaveUserService officeTeacherLeaveUserService) {		this.officeTeacherLeaveUserService = officeTeacherLeaveUserService;	}	public void setSystemIniService(SystemIniService systemIniService) {		this.systemIniService = systemIniService;	}	public void setUnitService(UnitService unitService) {		this.unitService = unitService;	}	public void setSmsClientService(SmsClientService smsClientService) {		this.smsClientService = smsClientService;	}	@Override	public OfficeTeacherLeave save(OfficeTeacherLeave officeTeacherLeave){		return officeTeacherLeaveDao.save(officeTeacherLeave);	}		@Override	public Integer delete(String[] ids){		List<OfficeTeacherLeave> officeTeacherLeaves = officeTeacherLeaveDao.getOfficeTeacherLeaveByIds(ids);		for (OfficeTeacherLeave officeTeacherLeave : officeTeacherLeaves) {			if(officeTeacherLeave.getApplyStatus() > Constants.LEAVE_APPLY_SAVE){				processHandlerService.deleteProcessInstance(officeTeacherLeave.getFlowId(), true);			}		}		officeTeacherLeaveUserService.deleteByLeaveIds(ids);		List<Attachment> attachments = attachmentService				.getAttachments(ids[0],Constants.OFFICE_TEACHER_LEAVE_ATT);		String[] attachmentIds = new String[attachments.size()];		for(int i = 0; i < attachments.size(); i++){			attachmentIds[i] = attachments.get(i).getId();		}		attachmentService.deleteAttachments(attachmentIds);		return officeTeacherLeaveDao.delete(ids);	}		@Override	public Integer update(OfficeTeacherLeave officeTeacherLeave){		return officeTeacherLeaveDao.update(officeTeacherLeave);	}	@Override	public OfficeTeacherLeave getOfficeTeacherByOfficeLog(OfficeTeacherLeave officeTeacherLeave,String unitId,String userId){		List<OfficeLog> logList=officeLogService.getOfficeList(unitId, userId,				 									String.valueOf(Constants.LEAVE_MOD_ID),Constants.LOG_APPLY);		if(CollectionUtils.isNotEmpty(logList)){			List<Flow> flowList = flowManageService.getFinishFlowList(unitId, FlowConstant.FLOW_OWNER_UNIT, 					FlowConstant.OFFICE_LEAVE,FlowConstant.OFFICE_SUBSYSTEM,FlowConstant.OFFICEDOC_FLOW_EASY_LEVEL_1);			User user = userService.getUser(userId);			if(user != null && StringUtils.isNotBlank(user.getDeptid())){				List<Flow> flowList2  = flowManageService.getFinishFlowList(user.getDeptid(), FlowConstant.FLOW_OWNER_STRING, 						FlowConstant.OFFICE_LEAVE,FlowConstant.OFFICE_SUBSYSTEM,FlowConstant.OFFICEDOC_FLOW_EASY_LEVEL_1);				if(CollectionUtils.isNotEmpty(flowList2)){					flowList.addAll(flowList2);				}			}						flowList = this.filterFlow(flowList, unitId, userId);			List<Flow> sortFlowList=new ArrayList<Flow>();			OfficeLog officeLog=logList.get(0);			String description=officeLog.getDescription();			JSONObject json=JSONObject.fromObject(description);			@SuppressWarnings("unchecked")			//获取log表里的内容  流程使用次数  上次提交的通知人员 流程			Map<String,Integer> map=(Map<String, Integer>) json.get("flowNumMap");			String noticePersonIds=(String) json.get("noticePersonIds");			String lastFlowId=(String) json.get("flowId");			if(MapUtils.isNotEmpty(map)){				List<String> flowIdList=new ArrayList<String>();				Iterator<String> it=map.keySet().iterator();				while(it.hasNext()){					flowIdList.add(it.next());				}				//对整个流程按使用次数进行排序				String[] arr=flowIdList.toArray(new String[0]);				if(ArrayUtils.isNotEmpty(arr)){					int length=arr.length;					for(int i=0;i<length;i++){						for(int j=i;j<length;j++){							if(map.get(arr[i])<map.get(arr[j])){								String flowId=arr[i];								arr[i]=arr[j];								arr[j]=flowId;							}						}					}				}				if(CollectionUtils.isNotEmpty(flowList)){					Map<String,Flow> flowMap=new HashMap<String, Flow>();					for(Flow flow:flowList){						flowMap.put(flow.getFlowId(),flow);					}					for(String flowId:arr){						Flow flow=flowMap.get(flowId);						if(flow!=null){							sortFlowList.add(flow);						}					}					Iterator<String> itFlow=flowMap.keySet().iterator();					while(itFlow.hasNext()){						String itFlowId=itFlow.next();						boolean flag=false;						for(String flowId:arr){							if(itFlowId.equals(flowId)){								flag=true;							}						}						if(!flag){							sortFlowList.add(flowMap.get(itFlowId));						}					}				}			}			officeTeacherLeave.setFlowList(sortFlowList);			officeTeacherLeave.setNoticePersonIds(noticePersonIds);			if(StringUtils.isEmpty(officeTeacherLeave.getFlowId())){				officeTeacherLeave.setFlowId(lastFlowId);			}						Map<String, User> userMap = userService.getUserMap(unitId);			if(StringUtils.isNotBlank(noticePersonIds)){				StringBuffer sbfNames = new StringBuffer();				int i=0;				String[] userIds=noticePersonIds.split(",");				for(String uId:userIds){					String id=uId.trim();					if(userMap.containsKey(uId.trim())){						if(i==0){							sbfNames.append(userMap.get(id).getRealname());						}else{							sbfNames.append(",").append(userMap.get(id).getRealname());						}						i++;					}				}				officeTeacherLeave.setNoticePersonNames(sbfNames.toString());			}		}		return officeTeacherLeave;	}	@Override	public String getTextComment(String unitId,String userId){		List<OfficeLog> logList=officeLogService.getOfficeList(unitId, userId,				String.valueOf(Constants.LEAVE_MOD_ID),Constants.LOG_AUDIT);		if(CollectionUtils.isNotEmpty(logList)){				OfficeLog officeLog=logList.get(0);				return officeLog.getDescription();		}else return "同意";	}	@Override	public OfficeTeacherLeave getOfficeTeacherLeaveById(String id){		OfficeTeacherLeave officeTeacherLeaveById = officeTeacherLeaveDao.getOfficeTeacherLeaveById(id);		if(officeTeacherLeaveById!=null){			User user = userService.getUser(officeTeacherLeaveById.getApplyUserId());			User user2=userService.getUser(officeTeacherLeaveById.getCreateUserId());			if(user2!=null){				officeTeacherLeaveById.setCreateUserName(user2.getRealname());			}			Teacher teacher = teacherService.getTeacher(officeTeacherLeaveById.getReplacingTeacher());			if(user!=null){				officeTeacherLeaveById.setApplyUserName(user.getRealname());			}						List<String> times=new ArrayList<String>();			List<String> rA=new ArrayList<String>();			if(StringUtils.isNotBlank(officeTeacherLeaveById.getDescription())){				String des=officeTeacherLeaveById.getDescription();				JSONObject json=JSONObject.fromObject(des);				SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");				String startStr=sdf.format(officeTeacherLeaveById.getLeaveBeignTime());				String endStr=sdf.format(officeTeacherLeaveById.getLeaveEndTime());				String[] arrA=startStr.split("-");				String[] arrB=endStr.split("-");				int yearA=Integer.parseInt(arrA[0]);				int yearB=Integer.parseInt(arrB[0]);				int monthA=Integer.parseInt(arrA[1]);				int monthB=(yearB-yearA)*12+Integer.parseInt((arrB[1]));				do{					do{							rA.add(yearA+""+(monthA > 9 ? monthA : "0"+monthA));							if(monthA == 12){							monthA=1;							monthB -= 12;							break;					   }					}while(monthB > monthA++);				}while(yearB > yearA++);				if(CollectionUtils.isNotEmpty(rA)){					for (String key : rA) {						String time=(String) json.get(key);						if(StringUtils.isNotBlank(time)){							times.add(time);						}					}				}				officeTeacherLeaveById.setTimes(times);			}						if(teacher!=null){				officeTeacherLeaveById.setReplacingTeacherName(teacher.getName());			}			if(StringUtils.isNotEmpty(officeTeacherLeaveById.getFlowId())){				List<HisTask> hisTask = officeFlowService.getHisTask(officeTeacherLeaveById.getFlowId());				officeTeacherLeaveById.setHisTaskList(hisTask);			}			officeTeacherLeaveById.setAttachments(attachmentService.getAttachments(officeTeacherLeaveById.getId(), Constants.OFFICE_TEACHER_LEAVE_ATT));			//设置通知人员			List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = officeTeacherLeaveUserService.getOfficeTeacherLeaveUserList(id);			if(CollectionUtils.isNotEmpty(officeTeacherLeaveUsers)){				Map<String, User> userMap = userService.getUserMap(officeTeacherLeaveById.getUnitId());				StringBuffer sbf = new StringBuffer();				StringBuffer sbfNames = new StringBuffer();				int i = 0;				for(OfficeTeacherLeaveUser otlu:officeTeacherLeaveUsers){					if(userMap.containsKey(otlu.getUserId())){						if(i == 0){							sbf.append(otlu.getUserId());							sbfNames.append(userMap.get(otlu.getUserId()).getRealname());						}else{							sbf.append(",").append(otlu.getUserId());							sbfNames.append(",").append(userMap.get(otlu.getUserId()).getRealname());						}						i++;					}				}				officeTeacherLeaveById.setNoticePersonIds(sbf.toString());				officeTeacherLeaveById.setNoticePersonNames(sbfNames.toString());			}		}		return officeTeacherLeaveById;	}		@Override	public Map<String, OfficeTeacherLeave> getOfficeTeacherLeaveMapByIds(String[] ids){		return officeTeacherLeaveDao.getOfficeTeacherLeaveMapByIds(ids);	}		@Override	public List<OfficeTeacherLeave> getOfficeTeacherLeaveList(){		return officeTeacherLeaveDao.getOfficeTeacherLeaveList();	}		@Override	public List<OfficeTeacherLeave> getOfficeTeacherLeavePage(Pagination page){		return officeTeacherLeaveDao.getOfficeTeacherLeavePage(page);	}		@Override	public List<OfficeTeacherLeave> getOfficeTeacherLeaveByUnitIdList(String[] unitIds){		return officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdList(unitIds);	}

	@Override
	public List<OfficeTeacherLeave> getOfficeTeacherLeaveByUnitIdList(String unitId){
		return officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdList(unitId);
	}

	@Override
	public List<OfficeTeacherLeave> getOfficeTeacherLeaveByUnitIdPage(String unitId, Pagination page){
		return officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdPage(unitId, page);
	}		public void setOfficeTeacherLeaveDao(OfficeTeacherLeaveDao officeTeacherLeaveDao){		this.officeTeacherLeaveDao = officeTeacherLeaveDao;	}	@Override	public List<OfficeTeacherLeave> getApplyList(String userId, String unitId,			int applyStatus, Pagination page) {		return officeTeacherLeaveDao.getApplyList(userId,unitId,applyStatus,page);	}	@Override	public List<OfficeTeacherLeave> getQueryList(String unitId,			String[] applyUserIds, Date startTime, Date endTime, Pagination page,boolean isSum) {		//isSum为true  查询是统计方式的查询		List<OfficeTeacherLeave> queryList = officeTeacherLeaveDao.getQueryList(unitId,applyUserIds,startTime,endTime, page,isSum);		Map<String, User> userMap = userService.getUserWithDelMap(applyUserIds);		Set<String>deptIds=new HashSet<String>();		for (OfficeTeacherLeave item : queryList) {			User user=userMap.get(item.getApplyUserId());			if(user!=null){				deptIds.add(user.getDeptid());			}		}		Map<String, Dept> deptMap = deptService.getDeptMap(deptIds.toArray(new String[0]));		for (OfficeTeacherLeave item : queryList) {			User user = userMap.get(item.getApplyUserId());			if(user!=null){				item.setApplyUserName(user.getRealname());				Dept dept = deptMap.get(user.getDeptid());				if(dept!=null){					item.setDeptName(dept.getDeptname());				}else {					item.setDeptName("部门已删除");				}			}					}		return queryList;	}	@Override	public void update(OfficeTeacherLeave officeTeacherLeave, List<UploadFile> uploadFileList,boolean isMobile, String[] removeAttachment) {		saveUsers(officeTeacherLeave);		officeTeacherLeaveDao.update(officeTeacherLeave);		if (isMobile && !CollectionUtils.isEmpty(uploadFileList)) {			if (ArrayUtils.isNotEmpty(removeAttachment)) {				attachmentService.deleteAttachments(removeAttachment);			}			List<Attachment> attachments=new ArrayList<Attachment>();			for (UploadFile uploadFile : uploadFileList) {				Attachment attachment = new Attachment();				attachment.setFileName(uploadFile.getFileName());				attachment.setContentType(uploadFile.getContentType());				attachment.setFileSize(uploadFile.getFileSize());				attachment.setUnitId(officeTeacherLeave.getUnitId());				attachment.setObjectId(officeTeacherLeave.getId());				attachment.setObjectType(Constants.OFFICE_TEACHER_LEAVE_ATT);				attachment.setConStatus(BusinessTask.TASK_STATUS_NOT_NEED_HAND);				attachments.add(attachment);//				attachmentService.saveAttachment(attachment, uploadFile, false);			}			attachmentService.batchInsertAttachment(attachments);		}			}	@Override //TODO	public OfficeTeacherLeave add(OfficeTeacherLeave officeTeacherLeave, List<UploadFile> uploadFileList,boolean isMobile) {		saveUsers(officeTeacherLeave);		officeTeacherLeave=officeTeacherLeaveDao.save(officeTeacherLeave);		//saveNoticePerson(officeTeacherLeave);		if (isMobile && !CollectionUtils.isEmpty(uploadFileList)) {			for (UploadFile uploadFile : uploadFileList) {				Attachment attachment = new Attachment();				attachment.setFileName(uploadFile.getFileName());				attachment.setContentType(uploadFile.getContentType());				attachment.setFileSize(uploadFile.getFileSize());				attachment.setUnitId(officeTeacherLeave.getUnitId());				attachment.setObjectId(officeTeacherLeave.getId());				attachment.setObjectType(Constants.OFFICE_TEACHER_LEAVE_ATT);				attachment.setConStatus(BusinessTask.TASK_STATUS_NOT_NEED_HAND);				attachmentService.saveAttachment(attachment, uploadFile, false);			}		}		return officeTeacherLeave;	}	@SuppressWarnings("unchecked")	public void saveNoticePerson(OfficeTeacherLeave officeTeacherLeave){		OfficeLog officeLog;		Map<String,Integer> map;		JSONObject json;		List<OfficeLog> logList=officeLogService.getOfficeList(officeTeacherLeave.getUnitId(), 				officeTeacherLeave.getCreateUserId(),String.valueOf(Constants.LEAVE_MOD_ID),Constants.LOG_APPLY);		//保存log表里的内容  流程使用次数  上次提交的通知人员 流程		if(CollectionUtils.isNotEmpty(logList)){			officeLog=logList.get(0);			String desciription=officeLog.getDescription();			json=JSONObject.fromObject(desciription);			map=(Map<String, Integer>) json.get("flowNumMap");			if(MapUtils.isNotEmpty(map)){				Iterator<String> it=map.keySet().iterator();				boolean flag=false;				while(it.hasNext()){					String flowId=it.next();					if(flowId.equals(officeTeacherLeave.getFlowId())){						int num=map.get(flowId);						map.put(flowId, num+1);						flag=true;					}				}				if(!flag){					map.put(officeTeacherLeave.getFlowId(),1);				}			}			json.put("flowNumMap", map);			json.put("noticePersonIds", officeTeacherLeave.getNoticePersonIds());			json.put("flowId",officeTeacherLeave.getFlowId());						officeLog.setDescription(json.toString());			officeLogService.update(officeLog);		}else {			officeLog=new OfficeLog();			officeLog.setUnitId(officeTeacherLeave.getUnitId());			officeLog.setUserId(officeTeacherLeave.getCreateUserId());			officeLog.setModid(String.valueOf(Constants.LEAVE_MOD_ID));			officeLog.setCode(Constants.LOG_APPLY);			officeLog.setLogtime(new Date());						json=new JSONObject();			map=new HashMap<String, Integer>();			map.put(officeTeacherLeave.getFlowId(),1);			json.put("flowNumMap", map);			json.put("noticePersonIds", officeTeacherLeave.getNoticePersonIds());			json.put("flowId",officeTeacherLeave.getFlowId());						officeLog.setDescription(json.toString());			officeLogService.save(officeLog);		}	}	public void saveUsers(OfficeTeacherLeave officeTeacherLeave){		if(StringUtils.isBlank(officeTeacherLeave.getId())){			officeTeacherLeave.setId(UUIDUtils.newId());		}else{			officeTeacherLeaveUserService.deleteByLeaveId(officeTeacherLeave.getId());		}		if(StringUtils.isNotBlank(officeTeacherLeave.getNoticePersonIds())){			String[] userIds = officeTeacherLeave.getNoticePersonIds().split(",");			List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = new ArrayList<OfficeTeacherLeaveUser>();			for(String userId:userIds){				OfficeTeacherLeaveUser officeTeacherLeaveUser = new OfficeTeacherLeaveUser();				officeTeacherLeaveUser.setLeaveId(officeTeacherLeave.getId());				officeTeacherLeaveUser.setUserId(userId);				officeTeacherLeaveUsers.add(officeTeacherLeaveUser);			}			officeTeacherLeaveUserService.batchSave(officeTeacherLeaveUsers);		}	}	@Override	public void startFlow(OfficeTeacherLeave officeTeacherLeave, String userId, List<UploadFile> uploadFileList,boolean isMobile, String[] removeAttachment) {		officeTeacherLeave.setApplyStatus(Constants.LEAVE_APPLY_FLOWING);		officeTeacherLeave.setCreateTime(new Date());				if(StringUtils.isBlank(officeTeacherLeave.getId())){			officeTeacherLeave.setId(UUIDUtils.newId());		}				Map<String, Object> variables = new HashMap<String, Object>();		variables.put("days", officeTeacherLeave.getDays());		variables.put("pass",true);				String flowId = processHandlerService.startProcessInstance(FlowConstant.OFFICE_SUBSYSTEM,officeTeacherLeave.getFlowId(), 				Integer.parseInt(FlowConstant.OFFICE_SUBSYSTEM+FlowConstant.OFFICE_LEAVE), officeTeacherLeave.getId(), userId, variables);				officeFlowStepInfoService.batchUpdateByFlowId(officeTeacherLeave.getFlowId(), flowId);		officeTeacherLeave.setFlowId(flowId);		OfficeTeacherLeave everLeave=officeTeacherLeaveDao.getOfficeTeacherLeaveById(officeTeacherLeave.getId());		if(everLeave!=null){			update(officeTeacherLeave,uploadFileList,isMobile, removeAttachment);			saveNoticePerson(officeTeacherLeave);		}else{			officeTeacherLeave=add(officeTeacherLeave,uploadFileList,isMobile);			saveNoticePerson(officeTeacherLeave);		}				//update(officeTeacherLeave);				officeConvertFlowService.startFlow(officeTeacherLeave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE);		officeFlowSendMsgService.startFlowSendMsg(officeTeacherLeave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE);				//如果需要发短信		TODO		if("1".equals(systemIniService.getValue("TEACHER.LEAVE.SMS"))){			String applyUserName = userService.getUser(officeTeacherLeave.getApplyUserId()).getRealname();			List<TaskDescription> tdlist = taskHandlerService.getTodoTasks(flowId);						if(CollectionUtils.isNotEmpty(tdlist)){				Unit unit = unitService.getUnit(officeTeacherLeave.getUnitId());				MsgDto msgDto = new MsgDto();				msgDto.setUserId(officeTeacherLeave.getApplyUserId());				msgDto.setUnitName(unit.getName());				msgDto.setUnitId(unit.getId());				msgDto.setUserName(applyUserName);				msgDto.setContent("您有一个请假申请需要审核！【"+applyUserName+"-"+ unit.getName() +"】【智慧教育应用】");				msgDto.setTiming(false);								//获取下步审核人员				Set<String> userIds = new HashSet<String>();				Set<String> teacherIds = new HashSet<String>();				for(TaskDescription task : tdlist){					userIds.addAll(task.getCandidateUsers());				}				Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));				for(User user : userMap.values()){					teacherIds.add(user.getTeacherid());				}				Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));								List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();				for(User user : userMap.values()){					Teacher tea = teacherMap.get(user.getTeacherid());					if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){						SendDetailDto sendDetailDto = new SendDetailDto();						sendDetailDto.setReceiverId(user.getId());						sendDetailDto.setReceiverName(user.getRealname());						sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信						sendDetailDto.setMobile(tea.getPersonTel());						sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户						sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id						sendDetailDtos.add(sendDetailDto);					}				}				SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);				smsThread.start();			}		}	}		/**	 * 发送短信	 * @author Administrator	 *	 */	private class SmsThread extends Thread{   	private MsgDto msgDto;   	private List<SendDetailDto> sendDetailDtoList;   	public SmsThread(MsgDto msgDto, List<SendDetailDto> sendDetailDtoList){   		this.msgDto = msgDto;   		this.sendDetailDtoList = sendDetailDtoList;   	}		@Override		public void run() {			smsClientService.saveSmsBatch(msgDto, sendDetailDtoList);		}	}		public void changeFlow(String leaveId, String userId, String modelId, String jsonResult){//TODO		OfficeTeacherLeave leave = this.getOfficeTeacherLeaveById(leaveId);		leave.setApplyStatus(Constants.LEAVE_APPLY_FLOWING);				Map<String, Object> variables = new HashMap<String, Object>();		variables.put("days", leave.getDays());		variables.put("pass", true);				String flowId = processHandlerService.startProcessInstance(FlowConstant.OFFICE_SUBSYSTEM,modelId, Integer.parseInt(FlowConstant.OFFICE_SUBSYSTEM+FlowConstant.OFFICE_LEAVE), leaveId, userId, jsonResult, variables);		officeFlowStepInfoService.batchUpdateByFlowId(modelId, flowId);		leave.setFlowId(flowId);		update(leave);				officeConvertFlowService.startFlow(leave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE);		officeFlowSendMsgService.startFlowSendMsg(leave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE);				//如果需要发短信		TODO		if("1".equals(systemIniService.getValue("TEACHER.LEAVE.SMS"))){			String applyUserName = userService.getUser(leave.getApplyUserId()).getRealname();			List<TaskDescription> tdlist = taskHandlerService.getTodoTasks(flowId);						if(CollectionUtils.isNotEmpty(tdlist)){				Unit unit = unitService.getUnit(leave.getUnitId());				MsgDto msgDto = new MsgDto();				msgDto.setUserId(leave.getApplyUserId());				msgDto.setUnitName(unit.getName());				msgDto.setUnitId(unit.getId());				msgDto.setUserName(applyUserName);				msgDto.setContent("您有一个请假申请需要审核！【"+applyUserName+"-"+ unit.getName() +"】【智慧教育应用】");				msgDto.setTiming(false);								//获取下步审核人员				Set<String> userIds = new HashSet<String>();				Set<String> teacherIds = new HashSet<String>();				for(TaskDescription task : tdlist){					userIds.addAll(task.getCandidateUsers());				}				Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));				for(User user : userMap.values()){					teacherIds.add(user.getTeacherid());				}				Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));								List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();				for(User user : userMap.values()){					Teacher tea = teacherMap.get(user.getTeacherid());					if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){						SendDetailDto sendDetailDto = new SendDetailDto();						sendDetailDto.setReceiverId(user.getId());						sendDetailDto.setReceiverName(user.getRealname());						sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信						sendDetailDto.setMobile(tea.getPersonTel());						sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户						sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id						sendDetailDtos.add(sendDetailDto);					}				}				SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);				smsThread.start();			}		}	}		public void setProcessHandlerService(			ProcessHandlerService processHandlerService) {		this.processHandlerService = processHandlerService;	}	@Override	public List<OfficeTeacherLeave> toDoAudit(String userId, Pagination page) {		List<OfficeTeacherLeave> leaveList = new ArrayList<OfficeTeacherLeave>();		List<TaskDescription> todoTaskList = new ArrayList<TaskDescription>();		todoTaskList = taskHandlerService.getTodoTasks(userId, Integer.parseInt(FlowConstant.OFFICE_SUBSYSTEM+FlowConstant.OFFICE_LEAVE), page);//		processInstanceId		if(CollectionUtils.isNotEmpty(todoTaskList)){			Set<String> flowIdSet= new HashSet<String>();			for (TaskDescription task : todoTaskList) {				flowIdSet.add(task.getProcessInstanceId());				}			Map<String,OfficeTeacherLeave> leaveMap = officeTeacherLeaveDao.getOfficeTeacherLeaveMapByFlowIds(flowIdSet.toArray(new String[0]));			Set<String> userIdSet = new HashSet<String>();			for (String leaveId : leaveMap.keySet()) {				OfficeTeacherLeave officeTeacherLeave = leaveMap.get(leaveId);				if(officeTeacherLeave!=null){					userIdSet.add(officeTeacherLeave.getApplyUserId());				}			}			Map<String,User> userMap = new HashMap<String, User>();			userMap = userService.getUserWithDelMap(userIdSet.toArray(new String[0]));			for (TaskDescription task : todoTaskList) {				OfficeTeacherLeave officeTeacherLeave = leaveMap.get(task.getProcessInstanceId());				if(officeTeacherLeave != null){					OfficeTeacherLeave ent = null;					try {						ent  = (OfficeTeacherLeave) BeanUtils.cloneBean(officeTeacherLeave);					} catch (Exception e) {						// TODO: handle exception					}					if(ent==null)						continue;					ent.setTaskId(task.getTaskId());					ent.setTaskName(task.getTaskName());					User user = userMap.get(ent.getApplyUserId());					if(user!=null){						ent.setApplyUserName(user.getRealname());					}else{						ent.setApplyUserName("用户已删除");					}					leaveList.add(ent);				}			}		}		return leaveList;	}	@Override	public List<OfficeTeacherLeave> haveDoneAudit(String userId,String unitId, Pagination page) {		Unit unit=unitService.getUnit(unitId);		List<OfficeTeacherLeave> leaveList=null;		Set<String> unitIsSet=new HashSet<String>();		if(unit.getUnitclass()==Unit.UNIT_CLASS_EDU){			List<Unit> unites=unitService.getUnderlingSchools(unitId);			unites.add(unit);			for (Unit unit2 : unites) {				unitIsSet.add(unit2.getId());			}			leaveList=officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdList(unitIsSet.toArray(new String[0]));		}else{			leaveList=officeTeacherLeaveDao.getOfficeTeacherLeaveByUnitIdList(unitId);		}		Set<String> flowIdSet=new HashSet<String>();		for (OfficeTeacherLeave officeTeacherLeave : leaveList) {			flowIdSet.add(officeTeacherLeave.getFlowId());		}		List<HistoricTask> historyTasks=taskHandlerService.getHistoricTasksByFlowIds(flowIdSet.toArray(new String[0]));		Set<String> flowDes=new HashSet<String>();		for (HistoricTask historicTask : historyTasks) {			Comment comment=historicTask.getComment();			if(comment!=null){					if(StringUtils.equals(userId, comment.getAssigneeId())){						flowDes.add(historicTask.getProcessInstanceId());					}			}		}		List<OfficeTeacherLeave> teacherLeaveList=officeTeacherLeaveDao.getOfficeTeacherLeaveListByFlowIds(flowDes.toArray(new String[0]), page);		this.setOfficeTeacherLeaveThings(teacherLeaveList, false);		return teacherLeaveList;	}	@Override	public List<OfficeTeacherLeave> HaveDoAudit(String userId,boolean invalid, Pagination page) {		List<OfficeTeacherLeave>  leaveList = officeTeacherLeaveDao.HaveDoAudit(userId,invalid,page);		this.setOfficeTeacherLeaveThings(leaveList, invalid);		return leaveList;	}		public void setOfficeTeacherLeaveThings(List<OfficeTeacherLeave> leaveList,boolean invalid){		Set<String> userIdSet = new HashSet<String>();		for (OfficeTeacherLeave officeTeacherLeave : leaveList) {			userIdSet.add(officeTeacherLeave.getApplyUserId());			if(invalid){				userIdSet.add(officeTeacherLeave.getInvalidUser());			}		}		Map<String,User> userMap = new HashMap<String, User>();		userMap = userService.getUserWithDelMap(userIdSet.toArray(new String[0]));		for (OfficeTeacherLeave officeTeacherLeave : leaveList) {			User user = userMap.get(officeTeacherLeave.getApplyUserId());			if(user!=null){				officeTeacherLeave.setApplyUserName(user.getRealname());			}else{				officeTeacherLeave.setApplyUserName("用户已删除");			}			if(StringUtils.isNotBlank(officeTeacherLeave.getInvalidUser())){				User user2 = userMap.get(officeTeacherLeave.getInvalidUser());				if(user2!=null){					officeTeacherLeave.setInvalidUserName(user2.getRealname());				}else{					officeTeacherLeave.setInvalidUserName("用户已删除");				}			}		}	}	//保存上次提交的审核意见	public void saveTextComment(TaskHandlerSave taskHandlerSave){		OfficeLog officeLog;		List<OfficeLog> logList=officeLogService.getOfficeList(taskHandlerSave.getCurrentUnitId(), 				taskHandlerSave.getCurrentUserId(),String.valueOf(Constants.LEAVE_MOD_ID),Constants.LOG_AUDIT);		if(CollectionUtils.isNotEmpty(logList)){			officeLog=logList.get(0);			officeLog.setDescription(taskHandlerSave.getComment().getTextComment());			officeLogService.update(officeLog);		}else {			officeLog=new OfficeLog();			officeLog.setUnitId(taskHandlerSave.getCurrentUnitId());			officeLog.setUserId(taskHandlerSave.getCurrentUserId());			officeLog.setModid(String.valueOf(Constants.LEAVE_MOD_ID));			officeLog.setCode(Constants.LOG_AUDIT);			officeLog.setLogtime(new Date());			officeLog.setDescription(taskHandlerSave.getComment().getTextComment());			officeLogService.save(officeLog);		}	}	@Override	public void passFlow(boolean pass, TaskHandlerSave taskHandlerSave,			String leaveId, String currentStepId) {		String auditUserId = taskHandlerSave.getCurrentUserId();		OfficeTeacherLeave leave = officeTeacherLeaveDao.getOfficeTeacherLeaveById(leaveId);		Map<String, Object> variables = new HashMap<String, Object>();		variables.put("pass", pass);		variables.put("days", leave.getDays());		taskHandlerSave.setVariables(variables);		TaskHandlerResult result;		saveTextComment(taskHandlerSave);		if(pass){			taskHandlerSave.getComment().setTextComment("[审核通过]"+taskHandlerSave.getComment().getTextComment());			//TODO 发送消息提醒			sendNote(leave);			result = taskHandlerService.completeTask(taskHandlerSave);		}else{			taskHandlerSave.getComment().setTextComment("[审核不通过]"+taskHandlerSave.getComment().getTextComment());			boolean isNotFinish = taskHandlerService.isExclusiveGatewayForNext(leave.getUnitId(), taskHandlerSave.getSubsystemId(), taskHandlerSave.getCurrentTask().getTaskDefinitionKey(), leave.getFlowId());			if(isNotFinish){				result = taskHandlerService.completeTask(taskHandlerSave);			}else{				result = taskHandlerService.suspendTask(taskHandlerSave);			}					}		if(result.getStatus()==TaskHandlerResult.STATUS_FINISH){			if(result.getResult()==TaskHandlerResult.RESULT_PASS){				leave.setApplyStatus(Constants.LEAVE_APPLY_FLOW_FINSH_PASS);			}else if(result.getResult()==TaskHandlerResult.RESULT_NOT_PASS){				leave.setApplyStatus(Constants.LEAVE_APPLY_FLOW_FINSH_NOT_PASS);			}			update(leave);		}				officeConvertFlowService.completeTask(leaveId, leave.getFlowId(), taskHandlerSave.getCurrentUserId(), taskHandlerSave.getCurrentTask().getTaskId(), result, pass);		if(result.getStatus()==TaskHandlerResult.STATUS_FINISH				|| officeFlowService.checkSendFlowMsg(leave.getFlowId(), currentStepId)){			officeFlowSendMsgService.completeTaskSendMsg(taskHandlerSave.getCurrentUserId(), pass, leave, ConvertFlowConstants.OFFICE_TEACHER_LEAVE, result);		}				//短信通知	TODO		if(pass && "1".equals(systemIniService.getValue("TEACHER.LEAVE.SMS"))){			Unit unit = unitService.getUnit(leave.getUnitId());			User applyUser = userService.getUser(leave.getApplyUserId());			User auditUser = userService.getUser(auditUserId);			String auditUserName = "";			if(auditUser != null){				auditUserName = auditUser.getRealname();			}						if(result.getStatus()==TaskHandlerResult.STATUS_FINISH){//结束流程通知申请人员、通知人员，否则通知下步审核人员				List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = officeTeacherLeaveUserService.getOfficeTeacherLeaveUserList(leave.getId());				if(CollectionUtils.isNotEmpty(officeTeacherLeaveUsers)){					MsgDto msgDto = new MsgDto();					msgDto.setUserId(auditUserId);					msgDto.setUnitName(unit.getName());					msgDto.setUnitId(unit.getId());					msgDto.setUserName(auditUserName);										SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");					String content = applyUser.getRealname()+"因"+leave.getLeaveReason()							+"，于"+sdf.format(leave.getLeaveBeignTime())							+"到"+sdf.format(leave.getLeaveEndTime())							+"期间,请假"+leave.getDays()+"天，请知晓";					msgDto.setContent(content);					msgDto.setTiming(false);										//获取通知人员					Set<String> userIds = new HashSet<String>();					Set<String> teacherIds = new HashSet<String>();					for(OfficeTeacherLeaveUser leaveuser : officeTeacherLeaveUsers){						userIds.add(leaveuser.getUserId());					}					Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));					for(User user : userMap.values()){						teacherIds.add(user.getTeacherid());					}					Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));										List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();					for(User user : userMap.values()){						Teacher tea = teacherMap.get(user.getTeacherid());						if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){							SendDetailDto sendDetailDto = new SendDetailDto();							sendDetailDto.setReceiverId(user.getId());							sendDetailDto.setReceiverName(user.getRealname());							sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信							sendDetailDto.setMobile(tea.getPersonTel());							sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户							sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id							sendDetailDtos.add(sendDetailDto);						}					}					SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);					smsThread.start();				}								//发送给申请人				MsgDto msgDto = new MsgDto();				msgDto.setUserId(auditUserId);				msgDto.setUnitName(unit.getName());				msgDto.setUnitId(unit.getId());				msgDto.setUserName(auditUserName);				msgDto.setContent("您有一个请假申请已审核通过！【"+auditUserName+"-"+ unit.getName() +"】【智慧教育应用】");				msgDto.setTiming(false);								Teacher applyTea = teacherService.getTeacher(applyUser.getTeacherid());								List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();				SendDetailDto sendDetailDto = new SendDetailDto();				sendDetailDto.setReceiverId(leave.getApplyUserId());				sendDetailDto.setReceiverName(applyUser.getRealname());				sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信				sendDetailDto.setMobile(applyTea.getPersonTel());				sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户				sendDetailDto.setUnitId(applyUser.getUnitid());// 短信接收用户单位id				sendDetailDtos.add(sendDetailDto);								SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);				smsThread.start();			}			else{				List<TaskDescription> tdlist = taskHandlerService.getTodoTasks(leave.getFlowId());				if(CollectionUtils.isNotEmpty(tdlist)){					MsgDto msgDto = new MsgDto();					msgDto.setUserId(auditUserId);					msgDto.setUnitId(unit.getId());					msgDto.setUnitName(unit.getName());					msgDto.setUserName(auditUserName);					msgDto.setContent("您有一个请假申请需要审核！【"+auditUserName+"-"+ unit.getName() +"】【智慧教育应用】");					msgDto.setTiming(false);										//获取下步审核人员					Set<String> userIds = new HashSet<String>();					Set<String> teacherIds = new HashSet<String>();					for(TaskDescription task : tdlist){						userIds.addAll(task.getCandidateUsers());					}					Map<String, User> userMap = userService.getUsersMap(userIds.toArray(new String[0]));					for(User user : userMap.values()){						teacherIds.add(user.getTeacherid());					}					Map<String, Teacher> teacherMap = teacherService.getTeacherMap(teacherIds.toArray(new String[0]));										List<SendDetailDto> sendDetailDtos = new ArrayList<SendDetailDto>();					for(User user : userMap.values()){						Teacher tea = teacherMap.get(user.getTeacherid());						if(tea != null && StringUtils.isNotBlank(tea.getPersonTel())){							SendDetailDto sendDetailDto = new SendDetailDto();							sendDetailDto.setReceiverId(user.getId());							sendDetailDto.setReceiverName(user.getRealname());							sendDetailDto.setBusinessType(SmsConstant.SMS_BUSINESS_PAY);// Sdk收费短信							sendDetailDto.setMobile(tea.getPersonTel());							sendDetailDto.setReceiverType(User.TEACHER_LOGIN);// 短信接收用户类型:教师用户							sendDetailDto.setUnitId(user.getUnitid());// 短信接收用户单位id							sendDetailDtos.add(sendDetailDto);						}					}					SmsThread smsThread = new SmsThread(msgDto, sendDetailDtos);					smsThread.start();				}			}		}	}		public void sendNote(OfficeTeacherLeave officeTeacherLeave){		List<OfficeTeacherLeaveUser> officeTeacherLeaveUsers = officeTeacherLeaveUserService.getOfficeTeacherLeaveUserList(officeTeacherLeave.getId());		if(CollectionUtils.isNotEmpty(officeTeacherLeaveUsers)){			StringBuffer sbf = new StringBuffer();			int i = 0;			for(OfficeTeacherLeaveUser otlu:officeTeacherLeaveUsers){				if(i == 0){					sbf.append(otlu.getUserId());				}else{					sbf.append(",").append(otlu.getUserId());				}				i++;			}			User user = userService.getUser(officeTeacherLeave.getCreateUserId());			User user1 = userService.getUser(officeTeacherLeave.getApplyUserId());			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");			//TODO---------------------组织消息内容------------------------			OfficeMsgSending officeMsgSending = new OfficeMsgSending();			officeMsgSending.setCreateUserId(officeTeacherLeave.getCreateUserId());			officeMsgSending.setTitle("教师请假审核通过信息提醒");			String content = user1.getRealname()+"因"+officeTeacherLeave.getLeaveReason()					+"，于"+sdf.format(officeTeacherLeave.getLeaveBeignTime())					+"到"+sdf.format(officeTeacherLeave.getLeaveEndTime())					+"期间,请假"+officeTeacherLeave.getDays()+"天，请安排相关事宜";			officeMsgSending.setContent(content);			officeMsgSending.setSimpleContent(content);			officeMsgSending.setUserIds(sbf.toString());			officeMsgSending.setUnitId(officeTeacherLeave.getUnitId());			officeMsgSending.setSendUserName(user.getRealname());			officeMsgSending.setState(Constants.MSG_STATE_SEND);			officeMsgSending.setIsNeedsms(false);			officeMsgSending.setMsgType(BaseConstant.MSG_TYPE_LEAVE);			officeMsgSendingService.save(officeMsgSending, null, null);			//TODO-------------------组织短信内容并发送----------------------		}	}	public int getDay(Date leaveBeginTime,Date leaveEndTime,Date startTime, Date endTime){		Date lastStartTime=null;		Date lastEndTime=null;		if(startTime!=null){			if(leaveBeginTime.after(startTime)){				lastStartTime=leaveBeginTime;			}else{				lastStartTime=startTime;			}		}else{			lastStartTime=leaveBeginTime;		}		if(endTime!=null){			if(leaveEndTime.after(endTime)){				lastEndTime=endTime;			}else{				lastEndTime=leaveEndTime;			}		}else{			lastEndTime=leaveEndTime;		}		Calendar c1=Calendar.getInstance();		c1.setTime(lastStartTime);		int d1=c1.get(Calendar.DAY_OF_YEAR);		c1.setTime(lastEndTime);;		int d2=c1.get(Calendar.DAY_OF_YEAR);		return d2-d1+1;	}	@Override	public Map<String, String> getSumMap(List<OfficeTeacherLeave> list,Date startTime, Date endTime) {		Map<String, String> sumMap=null;		List<String> rA=new ArrayList<String>();		if(startTime!=null&&endTime!=null){			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");			String startStr=sdf.format(startTime);			String endStr=sdf.format(endTime);			String[] arrA=startStr.split("-");			String[] arrB=endStr.split("-");			int yearA=Integer.parseInt(arrA[0]);			int yearB=Integer.parseInt(arrB[0]);			int monthA=Integer.parseInt(arrA[1]);			int monthB=(yearB-yearA)*12+Integer.parseInt((arrB[1]));			do{				do{						rA.add(yearA+""+(monthA > 9 ? monthA : "0"+monthA));						if(monthA == 12){						monthA=1;						monthB -= 12;						break;				   }				}while(monthB > monthA++);			}while(yearB > yearA++);		}else if(startTime!=null&&endTime==null){			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");			String startStr=sdf.format(startTime);			String[] arrA=startStr.split("-");			int yearA=Integer.parseInt(arrA[0]);			String endStr=arrA[0]+"-"+"12"+"-"+"01";			String[] arrB=endStr.split("-");			int yearB=Integer.parseInt(arrB[0]);			int monthA=Integer.parseInt(arrA[1]);			int monthB=(yearB-yearA)*12+Integer.parseInt((arrB[1]));			do{				do{						rA.add(yearA+""+(monthA > 9 ? monthA : "0"+monthA));						if(monthA == 12){						monthA=1;						monthB -= 12;						break;				   }				}while(monthB > monthA++);			}while(yearB > yearA++);		}else if(startTime==null&&endTime!=null){			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");			String endStr=sdf.format(endTime);			String[] arrB=endStr.split("-");			String startStr=arrB[0]+"-"+"01"+"-"+"01";			String[] arrA=startStr.split("-");			int yearA=Integer.parseInt(arrA[0]);			int yearB=Integer.parseInt(arrB[0]);			int monthA=Integer.parseInt(arrA[1]);			int monthB=(yearB-yearA)*12+Integer.parseInt((arrB[1]));			do{				do{						rA.add(yearA+""+(monthA > 9 ? monthA : "0"+monthA));						if(monthA == 12){						monthA=1;						monthB -= 12;						break;				   }				}while(monthB > monthA++);			}while(yearB > yearA++);		}		if(CollectionUtils.isNotEmpty(list)){			sumMap=new HashMap<String, String>();			JSONObject json=null;			for(OfficeTeacherLeave leave:list){				String description=leave.getDescription();				if(StringUtils.isNotBlank(description)){					json=JSONObject.fromObject(description);										String userId=leave.getApplyUserId();					String thisId=leave.getLeaveType();					if(CollectionUtils.isNotEmpty(rA)){						for(String yearM:rA){							String sday=(String) json.get(yearM);							if(StringUtils.isNotBlank(sday)&&!StringUtils.equals(sday, "0")){								if(sumMap.containsKey(userId+"_"+thisId)){									String day=sumMap.get(userId+"_"+thisId);									sumMap.put(userId+"_"+thisId, String.valueOf(Double.valueOf(day)+Double.valueOf((sday))));								}else{									sumMap.put(userId+"_"+thisId, sday);								}							}						}					}				}																//Date leaveBeginTime=leave.getLeaveBeignTime();				//Date leaveEndTime=leave.getLeaveEndTime();				//String userId=leave.getApplyUserId();				//String thisId=leave.getLeaveType();				//if(leaveBeginTime!=null && leaveEndTime!=null){				//	int sday=getDay(leaveBeginTime, leaveEndTime, startTime, endTime);				//	if(sumMap.containsKey(userId+"_"+thisId)){				//		int day=sumMap.get(userId+"_"+thisId);				//		sumMap.put(userId+"_"+thisId, day+sday);				//	}else{				//		sumMap.put(userId+"_"+thisId, sday);				//	}				//}			}		}		return sumMap;	}/*	public Map<String, String> getSumMap(String unitId, Date startTime, Date endTime, String deptId) {		return officeTeacherLeaveDao.getSumMap(unitId, startTime, endTime, deptId);	}*/		@Override	public String[] getApplyUserIds(String unitId, Date startTime,			Date endTime, String deptId) {		return officeTeacherLeaveDao.getApplyUserIds(unitId, startTime, endTime, deptId);	}	@Override	public void deleteRevoke(String id) {		//1.删除convertFlow关联表信息		OfficeConvertFlow officeConvertFlow = officeConvertFlowService.getObjByBusinessId(id);		if(officeConvertFlow!=null&&StringUtils.isNotBlank(officeConvertFlow.getId())){			officeConvertFlowTaskService.deleteByConvertFlowId(officeConvertFlow.getId());		}		officeConvertFlowService.deleteByBusinessId(id);		//2.删除对应流程表信息，本次撤销功能不发信息		//3.删除申请表		delete(new String[]{id} );	}	@Override	public void deleteInvalid(String id,String userId) {		OfficeTeacherLeave officeTeacherLeave = getOfficeTeacherLeaveById(id);		if(officeTeacherLeave!=null){			officeTeacherLeave.setApplyStatus(Constants.APPLY_STATE_INVALID);			officeTeacherLeave.setInvalidUser(userId);			update(officeTeacherLeave);		}		officeConvertFlowService.update(Constants.APPLY_STATE_INVALID, id);	}		@Override	public List<Flow> filterFlow(List<Flow> flowList, String unitId, String userId){//TODO 按条件筛选流程		//没有校长、副校长、园长的用户不能选择跨单位流程		if(!customRoleService.isCustomRole(unitId, userId, "70", "office_schoolmaster")			&& !customRoleService.isCustomRole(unitId, userId, "70", "office_vice_master")){			if(CollectionUtils.isNotEmpty(flowList)){				Iterator<Flow> it = flowList.iterator();  			    while(it.hasNext()){			        Flow flow = it.next(); 			        if (!StringUtils.equals(unitId, flow.getOwnerId()) 			        		&& FlowConstant.FLOW_OWNER_UNIT == flow.getOwnerType()) {			            it.remove(); 			        }			    }			}		}		return flowList;	}		@Override	public List<OfficeTeacherLeave> getOfficeTeacherLeavesByUnitIdAndUserId(			String unitId, String userId, Date date) {		List<OfficeTeacherLeave> officeTeacherLeaves=new ArrayList<OfficeTeacherLeave>();				/**-----------------------------教师请假--------------------------------**/		List<OfficeTeacherLeave> offices=officeTeacherLeaveDao.getOfficeTeacherLeavesByUnitIdAndUserId(unitId, null, date);		if(CollectionUtils.isNotEmpty(offices)){			officeTeacherLeaves.addAll(offices);		}		/**-----------------------------教师外出--------------------------------**/		List<OfficeGoOut> officeGoOuts=officeGoOutService.getOfficeTeacherLeavesByUnitIdAndUserId(unitId, date);		if(CollectionUtils.isNotEmpty(officeGoOuts)){			for (OfficeGoOut officeGoOut : officeGoOuts) {				OfficeTeacherLeave officeTeacherLeave=new OfficeTeacherLeave();				officeTeacherLeave.setApplyUserId(officeGoOut.getApplyUserId());				if(org.apache.commons.lang3.StringUtils.equals("1", officeGoOut.getOutType())){					officeTeacherLeave.setLeaveType("因公外出");				}else{					officeTeacherLeave.setLeaveType("因私外出");				}				officeTeacherLeaves.add(officeTeacherLeave);			}		}				/**---------------------------教师出差-----------------------------------**/		List<OfficeBusinessTrip> officeBusinessTrips=officeBusinessTripService.getListByUnitIdAndDate(unitId, date);		if(CollectionUtils.isNotEmpty(officeBusinessTrips)){			for (OfficeBusinessTrip officeBusinessTrip : officeBusinessTrips) {				OfficeTeacherLeave officeTeacherLeave=new OfficeTeacherLeave();				officeTeacherLeave.setApplyUserId(officeBusinessTrip.getApplyUserId());				officeTeacherLeave.setLeaveType("出差");				officeTeacherLeaves.add(officeTeacherLeave);			}		}				/*-----------------------------集体外出----------------------------------**/		List<OfficeJtGoout> officeJtGoouts=officeJtGooutService.getListByUnitIdAndDate(unitId, date);		if(CollectionUtils.isNotEmpty(officeJtGoouts)){			for (OfficeJtGoout officeJtGoout : officeJtGoouts) {				OfficeTeacherLeave officeTeacherLeave=new OfficeTeacherLeave();				officeTeacherLeave.setApplyUserId(officeJtGoout.getApplyUserId());				officeTeacherLeave.setLeaveType(officeJtGoout.getContent());				officeTeacherLeaves.add(officeTeacherLeave);			}		}				if(CollectionUtils.isNotEmpty(officeTeacherLeaves)){			Set<String> userSet=new HashSet<String>();			for (OfficeTeacherLeave officeTeacherLeave : officeTeacherLeaves) {				userSet.add(officeTeacherLeave.getApplyUserId());			}			Map<String, User> userMap = userService.getUserWithDelMap(userSet.toArray(new String[0]));			Set<String>deptIds=new HashSet<String>();			for (OfficeTeacherLeave item : officeTeacherLeaves) {				User user=userMap.get(item.getApplyUserId());				if(user!=null){					deptIds.add(user.getDeptid());				}			}			Map<String, Dept> deptMap = deptService.getDeptMap(deptIds.toArray(new String[0]));			Map<String, Mcodedetail> mcodedetail=mcodedetailService.getMcodeDetailMap("DM-QJLX");			for (OfficeTeacherLeave item : officeTeacherLeaves) {				if(mcodedetail.containsKey(item.getLeaveType())){					Mcodedetail mcodedetail2=mcodedetail.get(item.getLeaveType());					item.setLeaveType(mcodedetail2.getContent());				}				User user = userMap.get(item.getApplyUserId());				if(user!=null){					item.setApplyUserName(user.getRealname());					Dept dept = deptMap.get(user.getDeptid());					if(dept!=null){						item.setDeptName(dept.getDeptname());					}				}			}		}		return officeTeacherLeaves;	}	public void setOfficeLogService(OfficeLogService officeLogService) {		this.officeLogService = officeLogService;	}	public void setFlowManageService(FlowManageService flowManageService) {		this.flowManageService = flowManageService;	}	public void setCustomRoleService(CustomRoleService customRoleService) {		this.customRoleService = customRoleService;	}	public void setOfficeFlowService(OfficeFlowService officeFlowService) {		this.officeFlowService = officeFlowService;	}	public void setOfficeFlowStepInfoService(			OfficeFlowStepInfoService officeFlowStepInfoService) {		this.officeFlowStepInfoService = officeFlowStepInfoService;	}	public void setOfficeGoOutService(OfficeGoOutService officeGoOutService) {		this.officeGoOutService = officeGoOutService;	}	public void setMcodedetailService(McodedetailService mcodedetailService) {		this.mcodedetailService = mcodedetailService;	}	public void setOfficeBusinessTripService(			OfficeBusinessTripService officeBusinessTripService) {		this.officeBusinessTripService = officeBusinessTripService;	}	public void setOfficeJtGooutService(OfficeJtGooutService officeJtGooutService) {		this.officeJtGooutService = officeJtGooutService;	}	}