package net.zdsoft.office.health.service.impl;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import net.zdsoft.eis.base.common.entity.Student;import net.zdsoft.eis.base.common.entity.User;import net.zdsoft.eis.base.common.service.StudentService;import net.zdsoft.eis.base.common.service.UserService;import net.zdsoft.eis.base.common.service.UserSetService;import net.zdsoft.keel.util.DateUtils;import net.zdsoft.keel.util.Pagination;import net.zdsoft.office.health.constant.HealthConstants;import net.zdsoft.office.health.dao.OfficeHealthCountDao;import net.zdsoft.office.health.entity.OfficeHealthCount;import net.zdsoft.office.health.service.OfficeHealthCountService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;/** * office_health_count  * @author  *  */public class OfficeHealthCountServiceImpl implements OfficeHealthCountService{	private OfficeHealthCountDao officeHealthCountDao;	private StudentService studentService;	private UserService userService;	private UserSetService userSetService;		/**	 * 新增office_health_count	 * @param officeHealthCount	 * @return	 */	@Override	public OfficeHealthCount save(OfficeHealthCount officeHealthCount){		return officeHealthCountDao.save(officeHealthCount);	}		/**	 * 根据ids数组删除office_health_count数据	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeHealthCountDao.delete(ids);	}		/**	 * 更新office_health_count	 * @param officeHealthCount	 * @return	 */	@Override	public Integer update(OfficeHealthCount officeHealthCount){		return officeHealthCountDao.update(officeHealthCount);	}		/**	 * 根据id获取office_health_count	 * @param id	 * @return	 */	@Override	public OfficeHealthCount getOfficeHealthCountById(String id){		return officeHealthCountDao.getOfficeHealthCountById(id);	}	@Override	public List<OfficeHealthCount> getOfficeHealthCountByStudentId(String studentId,String dateType,Date queryDate){		Date nowDate=new Date();		if(queryDate!=null){			nowDate=queryDate;		}		String nowDateStr=DateUtils.date2String(nowDate,"yyyy-MM-dd");		String beforeDateStr=null;		int weekOrMonth=0;//确定是7还是30天		if(dateType.equals(HealthConstants.HEALTH_DATE_WEEK)){//周			weekOrMonth=-6;			beforeDateStr=DateUtils.date2String(DateUtils.addDay(nowDate,weekOrMonth),"yyyy-MM-dd");		}else if(dateType.equals(HealthConstants.HEALTH_DATE_MONTH)){//月			weekOrMonth=-29;			beforeDateStr=DateUtils.date2String(DateUtils.addDay(nowDate,weekOrMonth),"yyyy-MM-dd");		}		//获取数据库中的数据		List<OfficeHealthCount> healthList=officeHealthCountDao.getOfficeHealthCountByStudentId(studentId,nowDateStr,beforeDateStr);		//如果是周 月的 则进这步		if(dateType.equals(HealthConstants.HEALTH_DATE_WEEK)||dateType.equals(HealthConstants.HEALTH_DATE_MONTH)){			Map<String,OfficeHealthCount> map=new HashMap<String, OfficeHealthCount>();			if(CollectionUtils.isNotEmpty(healthList)){				for(OfficeHealthCount health:healthList){					map.put(DateUtils.date2String(health.getDate(),"yyyy-MM-dd"), health);				}			}			return getWeekOrMonthHealth(weekOrMonth,map);		}		return healthList;	}	public List<OfficeHealthCount> getWeekOrMonthHealth(int weekOrMonth,Map<String,OfficeHealthCount> map){		List<OfficeHealthCount> allList=new ArrayList<OfficeHealthCount>();		OfficeHealthCount health=null;		int month=0;		int day=0;		Calendar c=Calendar.getInstance();		c.setTime(new Date());		c.add(Calendar.DATE,weekOrMonth);		int beforeMonth=c.get(Calendar.MONTH)+1;				boolean isSameMonth=false;//已切换月份		for(int i=0;i<=Math.abs(weekOrMonth);i++){			health=new OfficeHealthCount();			if(i!=0){				c.add(Calendar.DATE,1);			}			Date date=c.getTime();						month=c.get(Calendar.MONTH)+1;//月			day=c.get(Calendar.DAY_OF_MONTH);//日			if(i==0){				health.setDateStr(month+"月"+day);			}else if(!isSameMonth && beforeMonth!=month){				health.setDateStr(month+"月"+day);				isSameMonth=true;			}else{				health.setDateStr(""+day);			}			OfficeHealthCount mapHealh=map.get(DateUtils.date2String(date, "yyyy-MM-dd"));			health.setDate(date);			if(mapHealh!=null){				health.setCalorie(mapHealh.getCalorie());				health.setStep(mapHealh.getStep());				health.setDistance(mapHealh.getDistance());			}else{				health.setCalorie(0.0);				health.setStep(0);				health.setDistance(0.0);			}			allList.add(health);		}				return allList;				/* Calendar calendar = Calendar.getInstance();	        calendar.setTime(date);	        calendar.add(Calendar.DATE, dayAmount);	        return calendar.getTime();*/	}	@Override	public Integer getRankByStudentId(Student student,Date queryDate){		if(queryDate==null){			queryDate=new Date();		}		String queryDateStr=DateUtils.date2String(queryDate, "yyyy-MM-dd");		List<Student> studentList=studentService.getStudents(student.getClassid());		Set<String> studentIds=new HashSet<String>();		//获取所有该班级下的学生id		if(CollectionUtils.isNotEmpty(studentList)){			for(Student stu:studentList){				studentIds.add(stu.getId());			}		}		List<OfficeHealthCount> healthList=officeHealthCountDao.getClassAllStuByStudentIds(studentIds.toArray(new String[0]),queryDateStr);		if(CollectionUtils.isNotEmpty(healthList)){			for(int i=0;i<healthList.size();i++){				if(healthList.get(i).getStudentId().equals(student.getId())){					return i+1;				}			}			return healthList.size()+1;		}		return 1;	}	@Override	public List<OfficeHealthCount> getStudentsByStudentId(String[] studentIds,String queryDateStr){		if(StringUtils.isBlank(queryDateStr)){			queryDateStr=DateUtils.date2String(new Date(), "yyyy-MM-dd");		}				Map<String,String> stuIdPhotoMap=new HashMap<String, String>();		Set<String> userIds=new HashSet<String>();		//通过studentids得到所有的userIds		Map<String,User> userMap=userService.getUserMapByOwner(1, studentIds);		Iterator<String> it=userMap.keySet().iterator();		while(it.hasNext()){			User user=userMap.get(it.next());			userIds.add(user!=null?user.getId():"");		}		//通过userIds得到photoUrlMap		Map<String,String> photoMap=userSetService.getUserPhotoMap(userIds.toArray(new String[0]));		Iterator<String> uit=userMap.keySet().iterator();		while(uit.hasNext()){			User user=userMap.get(uit.next());			if(user!=null){				stuIdPhotoMap.put(user.getTeacherid(),photoMap.get(user.getId()));			}		}		List<OfficeHealthCount> healthList=officeHealthCountDao.getClassAllStuByStudentIds(studentIds,queryDateStr);//type是1		Map<String,OfficeHealthCount> healthMap=new HashMap<String, OfficeHealthCount>();		int noStepRank=1;		if(CollectionUtils.isNotEmpty(healthList)){			noStepRank=healthList.size()+1;			for(int i=0;i<healthList.size();i++){				OfficeHealthCount health=healthList.get(i);				health.setStuRank(i+1);				healthMap.put(health.getStudentId(), health);			}		}else{			healthList=new ArrayList<OfficeHealthCount>();		}		//所有学生数据		for(String studentId:studentIds){			OfficeHealthCount health=healthMap.get(studentId);			if(health==null){				health=new OfficeHealthCount();				health.setStudentId(studentId);				health.setStuRank(noStepRank);				health.setDistance(0.0);				health.setCalorie(0.0);				healthList.add(health);			}		}		for(OfficeHealthCount health:healthList){			health.setPhotoUrl(stuIdPhotoMap.get(health.getStudentId()));		}		return healthList;	}	/**	 * 根据ids数组查询office_health_countmap	 * @param ids	 * @return	 */	@Override	public Map<String, OfficeHealthCount> getOfficeHealthCountMapByIds(String[] ids){		return officeHealthCountDao.getOfficeHealthCountMapByIds(ids);	}		/**	 * 获取office_health_count列表	 * @return	 */	@Override	public List<OfficeHealthCount> getOfficeHealthCountList(){		return officeHealthCountDao.getOfficeHealthCountList();	}		/**	 * 分页获取office_health_count列表	 * @param page	 * @return	 */	@Override	public List<OfficeHealthCount> getOfficeHealthCountPage(Pagination page){		return officeHealthCountDao.getOfficeHealthCountPage(page);	}			public void setOfficeHealthCountDao(OfficeHealthCountDao officeHealthCountDao){		this.officeHealthCountDao = officeHealthCountDao;	}	public void setStudentService(StudentService studentService) {		this.studentService = studentService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public void setUserSetService(UserSetService userSetService) {		this.userSetService = userSetService;	}}
