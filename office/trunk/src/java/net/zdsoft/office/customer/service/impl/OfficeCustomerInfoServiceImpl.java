package net.zdsoft.office.customer.service.impl;import java.util.*;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang.StringUtils;import net.zdsoft.office.customer.entity.OfficeCustomerApply;import net.zdsoft.office.customer.entity.OfficeCustomerInfo;import net.zdsoft.office.customer.entity.SearchCustomer;import net.zdsoft.office.customer.service.OfficeCustomerInfoService;import net.zdsoft.office.customer.constant.OfficeCustomerConstants;import net.zdsoft.office.customer.dao.OfficeCustomerInfoDao;import net.zdsoft.eis.base.common.entity.Region;import net.zdsoft.eis.base.common.service.RegionService;import net.zdsoft.keel.util.Pagination;/** * office_customer_info  * @author  *  */public class OfficeCustomerInfoServiceImpl implements OfficeCustomerInfoService{	private OfficeCustomerInfoDao officeCustomerInfoDao;	private RegionService regionService;		/**	 * 新增office_customer_info	 * @param officeCustomerInfo	 * @return	 */	@Override	public OfficeCustomerInfo save(OfficeCustomerInfo officeCustomerInfo){		officeCustomerInfo.setCreateTime(new Date());		return officeCustomerInfoDao.save(officeCustomerInfo);	}		/**	 * 根据ids数组删除office_customer_info数据	 * @param ids	 * @return	 */	@Override	public Integer delete(String[] ids){		return officeCustomerInfoDao.delete(ids);	}		/**	 * 更新office_customer_info	 * @param officeCustomerInfo	 * @return	 */	@Override	public Integer update(OfficeCustomerInfo officeCustomerInfo){		if(!officeCustomerInfo.isLibraryApply() 				&&(officeCustomerInfo.getProgressState().equals("05")||officeCustomerInfo.getProgressState().equals("09"))){			officeCustomerInfo.setState(OfficeCustomerConstants.INFO_LIBARAY);		}		return officeCustomerInfoDao.update(officeCustomerInfo);	}		public void updateState(String id, int state, Date addTime){		officeCustomerInfoDao.updateState(id, state, addTime);	}	@Override	public Integer saveAddTime(Date addTime){		return officeCustomerInfoDao.saveAddTime(addTime);	}	@Override	public Integer getSameCustomerName(OfficeCustomerInfo officeCustomerInfo){		List<OfficeCustomerInfo> infoList=officeCustomerInfoDao.getSameCustomerName(officeCustomerInfo);		int i=0;		if(CollectionUtils.isNotEmpty(infoList)){			i=infoList.size();		}		return i;	}	@Override	public List<OfficeCustomerInfo> getCustomerLibraryByUnitIdPage(			SearchCustomer searchCustomer, String unitId, Pagination page) {		if(StringUtils.isNotBlank(searchCustomer.getRegion())&&searchCustomer.getRegion().length()==6){			String region =searchCustomer.getRegion();			String regionPr=region.substring(0, 2);			String regionCi=region.substring(2, 4);			String regionCo=region.substring(4, 6);			StringBuilder regionBuilder=new StringBuilder(regionPr);			if(!regionCi.equals("00")){				regionBuilder.append(regionCi);			}			if(!regionCo.equals("00")){				regionBuilder.append(regionCo);			}			searchCustomer.setRegion(regionBuilder.toString());		}		List<OfficeCustomerInfo> infoList=officeCustomerInfoDao.getCustomerLibraryByUnitIdPage(searchCustomer, unitId, page);		if(CollectionUtils.isNotEmpty(infoList)){			/*Set<String> fullCodes=new HashSet<String>();			for(OfficeCustomerInfo info:infoList){				fullCodes.add(info.getRegion());			}*/			Map<String,String> regionMap=regionService.getRegionFullCodeMap();			boolean regionFlag=MapUtils.isNotEmpty(regionMap);			for(OfficeCustomerInfo info:infoList){				if(regionFlag){					info.setRegionName(regionMap.get(info.getRegion()));				}			}		}		return infoList;	}	/**	 * 根据id获取office_customer_info	 * @param id	 * @return	 */	@Override	public OfficeCustomerInfo getOfficeCustomerInfoById(String id){		OfficeCustomerInfo info=officeCustomerInfoDao.getOfficeCustomerInfoById(id);		if(info!=null){			if(StringUtils.isNotBlank(info.getProduct())){				String[] productArray=info.getProduct().split(",");				for(int i=0;i<productArray.length;i++){					productArray[i]=productArray[i].trim();					System.out.print(productArray[i]);				}				info.setProductArray(productArray);			}			Region region=regionService.getRegionByFullCode(info.getRegion());			if(region!=null){				info.setRegionName(region.getFullName());			}		}		return info;	}		/**	 * 根据ids数组查询office_customer_infomap	 * @param ids	 * @return	 */	@Override	public Map<String, OfficeCustomerInfo> getOfficeCustomerInfoMapByIds(String[] ids){		return officeCustomerInfoDao.getOfficeCustomerInfoMapByIds(ids);	}		/**	 * 获取office_customer_info列表	 * @return	 */	@Override	public List<OfficeCustomerInfo> getOfficeCustomerInfoList(){		return officeCustomerInfoDao.getOfficeCustomerInfoList();	}		/**	 * 分页获取office_customer_info列表	 * @param page	 * @return	 */	@Override	public List<OfficeCustomerInfo> getOfficeCustomerInfoPage(Pagination page){		return officeCustomerInfoDao.getOfficeCustomerInfoPage(page);	}	

	@Override
	public List<OfficeCustomerInfo> getOfficeCustomerInfoByUnitIdList(String unitId){
		return officeCustomerInfoDao.getOfficeCustomerInfoByUnitIdList(unitId);
	}

	@Override
	public List<OfficeCustomerInfo> getOfficeCustomerInfoByUnitIdPage(String unitId, Pagination page){
		return officeCustomerInfoDao.getOfficeCustomerInfoByUnitIdPage(unitId, page);
	}		public void setOfficeCustomerInfoDao(OfficeCustomerInfoDao officeCustomerInfoDao){		this.officeCustomerInfoDao = officeCustomerInfoDao;	}	public RegionService getRegionService() {		return regionService;	}	public void setRegionService(RegionService regionService) {		this.regionService = regionService;	}	}
