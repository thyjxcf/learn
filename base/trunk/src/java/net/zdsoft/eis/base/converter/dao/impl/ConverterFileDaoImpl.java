package net.zdsoft.eis.base.converter.dao.impl;import java.sql.ResultSet;import java.sql.SQLException;import java.util.Date;import java.util.List;import java.util.Properties;import net.zdsoft.eis.base.converter.dao.ConverterFileDao;import net.zdsoft.eis.base.converter.entity.ConverterFile;import net.zdsoft.eis.base.converter.entity.ConverterProperties;import net.zdsoft.eis.frame.client.BaseDao;import net.zdsoft.keel.util.Pagination;import net.zdsoft.leadin.common.entity.BusinessTask;public class ConverterFileDaoImpl extends BaseDao<ConverterFile> implements ConverterFileDao {	private static String SQL_UPDATE_RUNTIME ;	private static String SQL_UPDATE_NOHAND;	private static String SQL_UPDATE_FINISH;	private static String SQL_FIND_NOHAND_BY_STATUS;	private ConverterProperties properties;		public void setProperties(Properties properties) {		this.properties = new ConverterProperties(properties);		String tableName = this.properties.getTableName();				SQL_UPDATE_RUNTIME = "UPDATE " + tableName + " set status = ?, job_run_time = ? where id = ?";		SQL_UPDATE_NOHAND = "UPDATE "+ tableName + " set status = ? where (status = ? or status = ?) and ROUND(TO_NUMBER(sysdate - job_run_time) * 24 * 60) >= ?";		SQL_UPDATE_FINISH = "UPDATE " + tableName + " set status = ?, job_end_time = ?, result_msg = ? where id = ?";		SQL_FIND_NOHAND_BY_STATUS = "SELECT * FROM " + tableName + " WHERE status =? and ext_name in ";	}	@Override	public ConverterFile setField(ResultSet rs) throws SQLException {		ConverterFile file = new ConverterFile();		file.setId(rs.getString("id"));		file.setDirId(rs.getString("dir_id"));		file.setFilePath(rs.getString("file_path"));		file.setFileType(rs.getString("ext_name"));		file.setStatus(rs.getInt("status"));		file.setJobRunTime(rs.getDate("job_run_time"));		file.setJobEndTime(rs.getDate("job_end_time"));		file.setResultMsg(rs.getString("result_msg"));		return file;	}	@Override	public Integer updateRunTime(int status, Date jobRunTime, String id) {		return update(SQL_UPDATE_RUNTIME, new Object[] { status, jobRunTime, id });	}	@Override	public Integer updateJobInHand2NoHand(int resetTime) {		return update(SQL_UPDATE_NOHAND, new Object[] { BusinessTask.TASK_STATUS_NO_HAND,				BusinessTask.TASK_STATUS_PRE_HAND, BusinessTask.TASK_STATUS_IN_HAND, resetTime });	}	@Override	public Integer updateJobFinished(ConverterFile job) {		String msg = job.getResultMsg();		if (null != msg && net.zdsoft.keel.util.StringUtils.getRealLength(msg) > 1000) {			msg = msg.substring(0, 500);		}		return update(SQL_UPDATE_FINISH, new Object[] { job.getStatus(), job.getJobEndTime(), msg,				job.getId() });	}	@Override	public List<ConverterFile> findNextNoHandJobs(Pagination page, String[] extNames, Integer status) {		List<ConverterFile> list = queryForInSQL(SQL_FIND_NOHAND_BY_STATUS,				new Object[] { status }, extNames, new MultiRow(), " ORDER BY creation_time ASC",				page);		for (ConverterFile file : list) {			file.setProperties(properties);		}		return list;	}}